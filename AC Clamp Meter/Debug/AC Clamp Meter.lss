
AC Clamp Meter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000009a6  00000a3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010c  0080010c  00000a46  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a46  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001187  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b4e  00000000  00000000  00001df7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b16  00000000  00000000  00002945  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000384  00000000  00000000  0000345c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000747  00000000  00000000  000037e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005d9  00000000  00000000  00003f27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00004500  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ea       	ldi	r30, 0xA6	; 166
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 67 01 	call	0x2ce	; 0x2ce <main>
  9e:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <mode_measure>:
		0x7f, // 8
		0x67  // 9
	};
	digit = lookup[digit];
	return digit;
}
  a6:	8f 92       	push	r8
  a8:	9f 92       	push	r9
  aa:	af 92       	push	r10
  ac:	bf 92       	push	r11
  ae:	cf 92       	push	r12
  b0:	df 92       	push	r13
  b2:	ef 92       	push	r14
  b4:	ff 92       	push	r15
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	ec 01       	movw	r28, r24
  bc:	0e 94 26 02 	call	0x44c	; 0x44c <ADC_0_get_conversion_result>
  c0:	8f 5f       	subi	r24, 0xFF	; 255
  c2:	91 40       	sbci	r25, 0x01	; 1
  c4:	bc 01       	movw	r22, r24
  c6:	99 0f       	add	r25, r25
  c8:	88 0b       	sbc	r24, r24
  ca:	99 0b       	sbc	r25, r25
  cc:	0e 94 0d 03 	call	0x61a	; 0x61a <__floatsisf>
  d0:	6b 01       	movw	r12, r22
  d2:	7c 01       	movw	r14, r24
  d4:	68 81       	ld	r22, Y
  d6:	79 81       	ldd	r23, Y+1	; 0x01
  d8:	8a 81       	ldd	r24, Y+2	; 0x02
  da:	9b 81       	ldd	r25, Y+3	; 0x03
  dc:	0e 94 0b 03 	call	0x616	; 0x616 <__floatunsisf>
  e0:	4b 01       	movw	r8, r22
  e2:	5c 01       	movw	r10, r24
  e4:	a7 01       	movw	r20, r14
  e6:	96 01       	movw	r18, r12
  e8:	c7 01       	movw	r24, r14
  ea:	b6 01       	movw	r22, r12
  ec:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
  f0:	9b 01       	movw	r18, r22
  f2:	ac 01       	movw	r20, r24
  f4:	c5 01       	movw	r24, r10
  f6:	b4 01       	movw	r22, r8
  f8:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__addsf3>
  fc:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <__fixunssfsi>
 100:	68 83       	st	Y, r22
 102:	79 83       	std	Y+1, r23	; 0x01
 104:	8a 83       	std	Y+2, r24	; 0x02
 106:	9b 83       	std	Y+3, r25	; 0x03
 108:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 10c:	81 50       	subi	r24, 0x01	; 1
 10e:	21 f0       	breq	.+8      	; 0x118 <mode_measure+0x72>
 110:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	04 c0       	rjmp	.+8      	; 0x120 <mode_measure+0x7a>
 118:	88 e2       	ldi	r24, 0x28	; 40
 11a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	ff 90       	pop	r15
 126:	ef 90       	pop	r14
 128:	df 90       	pop	r13
 12a:	cf 90       	pop	r12
 12c:	bf 90       	pop	r11
 12e:	af 90       	pop	r10
 130:	9f 90       	pop	r9
 132:	8f 90       	pop	r8
 134:	08 95       	ret

00000136 <mode_calculate_rms>:
 136:	cf 92       	push	r12
 138:	df 92       	push	r13
 13a:	ef 92       	push	r14
 13c:	ff 92       	push	r15
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	ec 01       	movw	r28, r24
 148:	8b 01       	movw	r16, r22
 14a:	68 81       	ld	r22, Y
 14c:	79 81       	ldd	r23, Y+1	; 0x01
 14e:	8a 81       	ldd	r24, Y+2	; 0x02
 150:	9b 81       	ldd	r25, Y+3	; 0x03
 152:	28 e2       	ldi	r18, 0x28	; 40
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	40 e0       	ldi	r20, 0x00	; 0
 158:	50 e0       	ldi	r21, 0x00	; 0
 15a:	0e 94 a0 04 	call	0x940	; 0x940 <__udivmodsi4>
 15e:	69 01       	movw	r12, r18
 160:	7a 01       	movw	r14, r20
 162:	c7 01       	movw	r24, r14
 164:	b6 01       	movw	r22, r12
 166:	0e 94 0b 03 	call	0x616	; 0x616 <__floatunsisf>
 16a:	0e 94 30 04 	call	0x860	; 0x860 <sqrt>
 16e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <__fixunssfsi>
 172:	f8 01       	movw	r30, r16
 174:	71 83       	std	Z+1, r23	; 0x01
 176:	60 83       	st	Z, r22
 178:	18 82       	st	Y, r1
 17a:	19 82       	std	Y+1, r1	; 0x01
 17c:	1a 82       	std	Y+2, r1	; 0x02
 17e:	1b 82       	std	Y+3, r1	; 0x03
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	1f 91       	pop	r17
 188:	0f 91       	pop	r16
 18a:	ff 90       	pop	r15
 18c:	ef 90       	pop	r14
 18e:	df 90       	pop	r13
 190:	cf 90       	pop	r12
 192:	08 95       	ret

00000194 <refresh_display>:
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	ec 01       	movw	r28, r24
 19a:	2b b1       	in	r18, 0x0b	; 11
 19c:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <__data_end>
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	ee 0f       	add	r30, r30
 1a4:	ff 1f       	adc	r31, r31
 1a6:	e8 0f       	add	r30, r24
 1a8:	f9 1f       	adc	r31, r25
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	00 80       	ld	r0, Z
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <refresh_display+0x22>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	0a 94       	dec	r0
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <refresh_display+0x1e>
 1ba:	80 95       	com	r24
 1bc:	82 23       	and	r24, r18
 1be:	8b b9       	out	0x0b, r24	; 11
 1c0:	5f 98       	cbi	0x0b, 7	; 11
 1c2:	5f 9a       	sbi	0x0b, 7	; 11
 1c4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1c8:	8f 5f       	subi	r24, 0xFF	; 255
 1ca:	83 30       	cpi	r24, 0x03	; 3
 1cc:	18 f4       	brcc	.+6      	; 0x1d4 <refresh_display+0x40>
 1ce:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <refresh_display+0x44>
 1d4:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
 1d8:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <__data_end>
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	ee 0f       	add	r30, r30
 1e0:	ff 1f       	adc	r31, r31
 1e2:	ec 0f       	add	r30, r28
 1e4:	fd 1f       	adc	r31, r29
 1e6:	81 81       	ldd	r24, Z+1	; 0x01
 1e8:	0e 94 4a 02 	call	0x494	; 0x494 <SPI_0_write>
 1ec:	2b b1       	in	r18, 0x0b	; 11
 1ee:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <__data_end>
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	ee 0f       	add	r30, r30
 1f6:	ff 1f       	adc	r31, r31
 1f8:	ec 0f       	add	r30, r28
 1fa:	fd 1f       	adc	r31, r29
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	00 80       	ld	r0, Z
 202:	02 c0       	rjmp	.+4      	; 0x208 <refresh_display+0x74>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	0a 94       	dec	r0
 20a:	e2 f7       	brpl	.-8      	; 0x204 <refresh_display+0x70>
 20c:	82 2b       	or	r24, r18
 20e:	8b b9       	out	0x0b, r24	; 11
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <extract_digits>:

void extract_digits(uint16_t number, seven_segment_digit *digits)
{
 218:	0f 93       	push	r16
 21a:	1f 93       	push	r17
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	ac 01       	movw	r20, r24
 222:	eb 01       	movw	r28, r22
 224:	8b 01       	movw	r16, r22
 226:	0a 5f       	subi	r16, 0xFA	; 250
 228:	1f 4f       	sbci	r17, 0xFF	; 255
		0x7d, // 6
		0x07, // 7
		0x7f, // 8
		0x67  // 9
	};
	digit = lookup[digit];
 22a:	9a 01       	movw	r18, r20
 22c:	ad ec       	ldi	r26, 0xCD	; 205
 22e:	bc ec       	ldi	r27, 0xCC	; 204
 230:	0e 94 c2 04 	call	0x984	; 0x984 <__umulhisi3>
 234:	96 95       	lsr	r25
 236:	87 95       	ror	r24
 238:	96 95       	lsr	r25
 23a:	87 95       	ror	r24
 23c:	96 95       	lsr	r25
 23e:	87 95       	ror	r24
 240:	9c 01       	movw	r18, r24
 242:	22 0f       	add	r18, r18
 244:	33 1f       	adc	r19, r19
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	82 0f       	add	r24, r18
 254:	93 1f       	adc	r25, r19
 256:	fa 01       	movw	r30, r20
 258:	e8 1b       	sub	r30, r24
 25a:	f9 0b       	sbc	r31, r25
 25c:	ff 27       	eor	r31, r31
 25e:	ef 5f       	subi	r30, 0xFF	; 255
 260:	fe 4f       	sbci	r31, 0xFE	; 254

void extract_digits(uint16_t number, seven_segment_digit *digits)
{
	uint8_t i = 0;
	while (i < 3) {
		digits[i].bit_pattern = encode_digit(number % 10);
 262:	80 81       	ld	r24, Z
 264:	89 83       	std	Y+1, r24	; 0x01
		number = number / 10;
 266:	9a 01       	movw	r18, r20
 268:	0e 94 c2 04 	call	0x984	; 0x984 <__umulhisi3>
 26c:	ac 01       	movw	r20, r24
 26e:	56 95       	lsr	r21
 270:	47 95       	ror	r20
 272:	56 95       	lsr	r21
 274:	47 95       	ror	r20
 276:	56 95       	lsr	r21
 278:	47 95       	ror	r20
 27a:	22 96       	adiw	r28, 0x02	; 2
}

void extract_digits(uint16_t number, seven_segment_digit *digits)
{
	uint8_t i = 0;
	while (i < 3) {
 27c:	c0 17       	cp	r28, r16
 27e:	d1 07       	cpc	r29, r17
 280:	a1 f6       	brne	.-88     	; 0x22a <extract_digits+0x12>
		digits[i].bit_pattern = encode_digit(number % 10);
		number = number / 10;
		i++;
	}
}
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	1f 91       	pop	r17
 288:	0f 91       	pop	r16
 28a:	08 95       	ret

0000028c <scale_output>:
	}
}
*/
float scale_output(uint16_t adc_reading)
{
	return (round(adc_reading * scale_factor));
 28c:	bc 01       	movw	r22, r24
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 0b 03 	call	0x616	; 0x616 <__floatunsisf>
 296:	2d ec       	ldi	r18, 0xCD	; 205
 298:	3c ec       	ldi	r19, 0xCC	; 204
 29a:	4c ec       	ldi	r20, 0xCC	; 204
 29c:	5d e3       	ldi	r21, 0x3D	; 61
 29e:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
 2a2:	0e 94 06 04 	call	0x80c	; 0x80c <round>
}
 2a6:	08 95       	ret

000002a8 <mode_update_display_buffer>:
	*sum = 0;
	return MODE_SYNC;
}

uint8_t mode_update_display_buffer(seven_segment_digit *digits, uint16_t *rms)
{
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	ec 01       	movw	r28, r24
	uint16_t output_value = scale_output(*rms);
 2ae:	fb 01       	movw	r30, r22
 2b0:	80 81       	ld	r24, Z
 2b2:	91 81       	ldd	r25, Z+1	; 0x01
 2b4:	0e 94 46 01 	call	0x28c	; 0x28c <scale_output>
	extract_digits(output_value, digits);
 2b8:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <__fixunssfsi>
 2bc:	dc 01       	movw	r26, r24
 2be:	cb 01       	movw	r24, r22
 2c0:	be 01       	movw	r22, r28
 2c2:	0e 94 0c 01 	call	0x218	; 0x218 <extract_digits>
	return MODE_SYNC;
}
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	08 95       	ret

000002ce <main>:
volatile uint8_t disp_timer = 0;

static const float scale_factor = 0.1;

int main(void)
{
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	cd b7       	in	r28, 0x3d	; 61
 2d4:	de b7       	in	r29, 0x3e	; 62
 2d6:	2c 97       	sbiw	r28, 0x0c	; 12
 2d8:	0f b6       	in	r0, 0x3f	; 63
 2da:	f8 94       	cli
 2dc:	de bf       	out	0x3e, r29	; 62
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e2:	2f ef       	ldi	r18, 0xFF	; 255
 2e4:	83 ed       	ldi	r24, 0xD3	; 211
 2e6:	90 e3       	ldi	r25, 0x30	; 48
 2e8:	21 50       	subi	r18, 0x01	; 1
 2ea:	80 40       	sbci	r24, 0x00	; 0
 2ec:	90 40       	sbci	r25, 0x00	; 0
 2ee:	e1 f7       	brne	.-8      	; 0x2e8 <main+0x1a>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <main+0x24>
 2f2:	00 00       	nop
	_delay_ms(1000);
	i_o_init();
 2f4:	0e 94 38 02 	call	0x470	; 0x470 <i_o_init>
	device_init();
 2f8:	0e 94 2f 02 	call	0x45e	; 0x45e <device_init>
	ADC_0_select_channel(adc_channel);
 2fc:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <adc_channel>
 300:	0e 94 1e 02 	call	0x43c	; 0x43c <ADC_0_select_channel>
	uint8_t display_refresh_ticks = 15;	// 15 * 416 us = 6.25 ms, higher values cause flicker
	
	seven_segment_digit tenths_pace = {.enable_pin = DISPLAY_DIGIT_TENTHS};
	seven_segment_digit ones_place = {.enable_pin = DISPLAY_DIGIT_ONES};
	seven_segment_digit tens_place = {.enable_pin = DISPLAY_DIGIT_TENS};
	seven_segment_digit digits[3] = {tenths_pace, ones_place, tens_place};
 304:	84 e0       	ldi	r24, 0x04	; 4
 306:	89 83       	std	Y+1, r24	; 0x01
 308:	1a 82       	std	Y+2, r1	; 0x02
 30a:	85 e0       	ldi	r24, 0x05	; 5
 30c:	8b 83       	std	Y+3, r24	; 0x03
 30e:	1c 82       	std	Y+4, r1	; 0x04
 310:	86 e0       	ldi	r24, 0x06	; 6
 312:	8d 83       	std	Y+5, r24	; 0x05
 314:	1e 82       	std	Y+6, r1	; 0x06
		
	uint32_t sum = 0;
 316:	1f 82       	std	Y+7, r1	; 0x07
 318:	18 86       	std	Y+8, r1	; 0x08
 31a:	19 86       	std	Y+9, r1	; 0x09
 31c:	1a 86       	std	Y+10, r1	; 0x0a
	uint16_t rms = 0;
 31e:	1c 86       	std	Y+12, r1	; 0x0c
 320:	1b 86       	std	Y+11, r1	; 0x0b
		
	sei();
 322:	78 94       	sei

	mode = MODE_SYNC;
 324:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <mode>
					timer_ticks = 0;
				}
				
				if (disp_timer > display_refresh_ticks) {
					disp_timer = 0;
					mode = MODE_REFRESH_DISPLAY;
 328:	04 e0       	ldi	r16, 0x04	; 4
		switch(mode)
		{
			
			case MODE_SYNC:
				if (timer_ticks > timer_ticks_to_display_update) {
					mode = MODE_UPDATE_DISPLAY;
 32a:	13 e0       	ldi	r17, 0x03	; 3
	mode = MODE_SYNC;
	
	while (1)
	{
		
		switch(mode)
 32c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mode>
 330:	82 30       	cpi	r24, 0x02	; 2
 332:	41 f1       	breq	.+80     	; 0x384 <main+0xb6>
 334:	28 f4       	brcc	.+10     	; 0x340 <main+0x72>
 336:	88 23       	and	r24, r24
 338:	41 f0       	breq	.+16     	; 0x34a <main+0x7c>
 33a:	81 30       	cpi	r24, 0x01	; 1
 33c:	e1 f0       	breq	.+56     	; 0x376 <main+0xa8>
 33e:	f6 cf       	rjmp	.-20     	; 0x32c <main+0x5e>
 340:	83 30       	cpi	r24, 0x03	; 3
 342:	59 f1       	breq	.+86     	; 0x39a <main+0xcc>
 344:	84 30       	cpi	r24, 0x04	; 4
 346:	99 f1       	breq	.+102    	; 0x3ae <main+0xe0>
 348:	f1 cf       	rjmp	.-30     	; 0x32c <main+0x5e>
		{
			
			case MODE_SYNC:
				if (timer_ticks > timer_ticks_to_display_update) {
 34a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <timer_ticks>
 34e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <timer_ticks+0x1>
 352:	89 35       	cpi	r24, 0x59	; 89
 354:	92 40       	sbci	r25, 0x02	; 2
 356:	30 f0       	brcs	.+12     	; 0x364 <main+0x96>
					mode = MODE_UPDATE_DISPLAY;
 358:	10 93 10 01 	sts	0x0110, r17	; 0x800110 <mode>
					timer_ticks = 0;
 35c:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <timer_ticks+0x1>
 360:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <timer_ticks>
				}
				
				if (disp_timer > display_refresh_ticks) {
 364:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <disp_timer>
 368:	80 31       	cpi	r24, 0x10	; 16
 36a:	00 f3       	brcs	.-64     	; 0x32c <main+0x5e>
					disp_timer = 0;
 36c:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <disp_timer>
					mode = MODE_REFRESH_DISPLAY;
 370:	00 93 10 01 	sts	0x0110, r16	; 0x800110 <mode>
 374:	db cf       	rjmp	.-74     	; 0x32c <main+0x5e>
			/* This case is executed when ADC has finished sampling the input and	*/
			/* issued an interrupt.                                                 */
			/************************************************************************/
			case MODE_MEASURE:
				//PORTC |= (1 << INSTRUMENTATION_OUT);
				mode = mode_measure(&sum);
 376:	ce 01       	movw	r24, r28
 378:	07 96       	adiw	r24, 0x07	; 7
 37a:	0e 94 53 00 	call	0xa6	; 0xa6 <mode_measure>
 37e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <mode>
				//PORTC &= ~(1 << INSTRUMENTATION_OUT);
				break;
 382:	d4 cf       	rjmp	.-88     	; 0x32c <main+0x5e>
			/************************************************************************/
			/* This case is executed when all required samples have been taken.     */                                                    
			/************************************************************************/	
			case MODE_CALCULATE:
				//PORTC |= (1 << INSTRUMENTATION_OUT);
				mode = mode_calculate_rms(&sum, &rms);
 384:	be 01       	movw	r22, r28
 386:	65 5f       	subi	r22, 0xF5	; 245
 388:	7f 4f       	sbci	r23, 0xFF	; 255
 38a:	ce 01       	movw	r24, r28
 38c:	07 96       	adiw	r24, 0x07	; 7
 38e:	0e 94 9b 00 	call	0x136	; 0x136 <mode_calculate_rms>
 392:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <mode>
				PORTC &= ~(1 << INSTRUMENTATION_OUT);
 396:	44 98       	cbi	0x08, 4	; 8
				break;
 398:	c9 cf       	rjmp	.-110    	; 0x32c <main+0x5e>
			/* This case is executed approximately every 0.25 seconds.              */
			/* Updates buffer holding digits displayed on 7-segment                 */
			/************************************************************************/	
			case MODE_UPDATE_DISPLAY:
				//PORTC |= (1 << INSTRUMENTATION_OUT);
				mode = mode_update_display_buffer(digits, &rms);
 39a:	be 01       	movw	r22, r28
 39c:	65 5f       	subi	r22, 0xF5	; 245
 39e:	7f 4f       	sbci	r23, 0xFF	; 255
 3a0:	ce 01       	movw	r24, r28
 3a2:	01 96       	adiw	r24, 0x01	; 1
 3a4:	0e 94 54 01 	call	0x2a8	; 0x2a8 <mode_update_display_buffer>
 3a8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <mode>
				//PORTC &= ~(1 << INSTRUMENTATION_OUT);
				break;
 3ac:	bf cf       	rjmp	.-130    	; 0x32c <main+0x5e>
			/* Visually determined this to be maximum refresh interval that does	*/
			/* not produce flicker.                                                 */
			/************************************************************************/
			case MODE_REFRESH_DISPLAY:
				//PORTC |= (1 << INSTRUMENTATION_OUT);
				mode = refresh_display(digits);
 3ae:	ce 01       	movw	r24, r28
 3b0:	01 96       	adiw	r24, 0x01	; 1
 3b2:	0e 94 ca 00 	call	0x194	; 0x194 <refresh_display>
 3b6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <mode>
				//PORTC &= ~(1 << INSTRUMENTATION_OUT);
				break;
 3ba:	b8 cf       	rjmp	.-144    	; 0x32c <main+0x5e>

000003bc <__vector_14>:
{
	return (round(adc_reading * scale_factor));
}

ISR(TIMER0_COMPA_vect)
{
 3bc:	1f 92       	push	r1
 3be:	0f 92       	push	r0
 3c0:	0f b6       	in	r0, 0x3f	; 63
 3c2:	0f 92       	push	r0
 3c4:	11 24       	eor	r1, r1
 3c6:	8f 93       	push	r24
 3c8:	9f 93       	push	r25
	timer_ticks += 1;
 3ca:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <timer_ticks>
 3ce:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <timer_ticks+0x1>
 3d2:	01 96       	adiw	r24, 0x01	; 1
 3d4:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timer_ticks+0x1>
 3d8:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timer_ticks>
	disp_timer += 1;
 3dc:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <disp_timer>
 3e0:	8f 5f       	subi	r24, 0xFF	; 255
 3e2:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <disp_timer>
	PORTC ^= (1 << TIMER_OUT);
 3e6:	98 b1       	in	r25, 0x08	; 8
 3e8:	80 e2       	ldi	r24, 0x20	; 32
 3ea:	89 27       	eor	r24, r25
 3ec:	88 b9       	out	0x08, r24	; 8
}
 3ee:	9f 91       	pop	r25
 3f0:	8f 91       	pop	r24
 3f2:	0f 90       	pop	r0
 3f4:	0f be       	out	0x3f, r0	; 63
 3f6:	0f 90       	pop	r0
 3f8:	1f 90       	pop	r1
 3fa:	18 95       	reti

000003fc <__vector_21>:

ISR(ADC_vect)
{
 3fc:	1f 92       	push	r1
 3fe:	0f 92       	push	r0
 400:	0f b6       	in	r0, 0x3f	; 63
 402:	0f 92       	push	r0
 404:	11 24       	eor	r1, r1
 406:	8f 93       	push	r24
	mode = MODE_MEASURE;
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <mode>
 40e:	8f 91       	pop	r24
 410:	0f 90       	pop	r0
 412:	0f be       	out	0x3f, r0	; 63
 414:	0f 90       	pop	r0
 416:	1f 90       	pop	r1
 418:	18 95       	reti

0000041a <ADC_0_init>:
}

uint8_t ADC_0_is_conversion_done()
{
	return ((ADCSRA & (1 << ADIF)));
}
 41a:	80 e4       	ldi	r24, 0x40	; 64
 41c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 420:	8f ea       	ldi	r24, 0xAF	; 175
 422:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 426:	83 e0       	ldi	r24, 0x03	; 3
 428:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	08 95       	ret

00000430 <ADC_0_clear_interrupt_flag>:
 430:	ea e7       	ldi	r30, 0x7A	; 122
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	80 81       	ld	r24, Z
 436:	80 61       	ori	r24, 0x10	; 16
 438:	80 83       	st	Z, r24
 43a:	08 95       	ret

0000043c <ADC_0_select_channel>:
 43c:	ec e7       	ldi	r30, 0x7C	; 124
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	90 81       	ld	r25, Z
 442:	90 7f       	andi	r25, 0xF0	; 240
 444:	8f 70       	andi	r24, 0x0F	; 15
 446:	89 2b       	or	r24, r25
 448:	80 83       	st	Z, r24
 44a:	08 95       	ret

0000044c <ADC_0_get_conversion_result>:

uint16_t ADC_0_get_conversion_result()
{
	ADC_0_clear_interrupt_flag();
 44c:	0e 94 18 02 	call	0x430	; 0x430 <ADC_0_clear_interrupt_flag>
	return (ADCL | ADCH << 8);
 450:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 454:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 458:	90 e0       	ldi	r25, 0x00	; 0
}
 45a:	92 2b       	or	r25, r18
 45c:	08 95       	ret

0000045e <device_init>:

#include <setup.h>

void device_init()
{
	TIMER_0_init();
 45e:	0e 94 4f 02 	call	0x49e	; 0x49e <TIMER_0_init>
	ADC_0_init();
 462:	0e 94 0d 02 	call	0x41a	; 0x41a <ADC_0_init>
	USART_0_init();
 466:	0e 94 5d 02 	call	0x4ba	; 0x4ba <USART_0_init>
	SPI_0_init();
 46a:	0e 94 3f 02 	call	0x47e	; 0x47e <SPI_0_init>
 46e:	08 95       	ret

00000470 <i_o_init>:
}

void i_o_init()
{
	DDRC |= (1 << TIMER_OUT);
 470:	3d 9a       	sbi	0x07, 5	; 7
	DDRC |= (1 << INSTRUMENTATION_OUT);
 472:	3c 9a       	sbi	0x07, 4	; 7
	DDRD |= (1 << DISPLAY_DIGIT_TENTHS);
 474:	54 9a       	sbi	0x0a, 4	; 10
	DDRD |= (1 << DISPLAY_DIGIT_ONES);
 476:	55 9a       	sbi	0x0a, 5	; 10
	DDRD |= (1 << DISPLAY_DIGIT_TENS);
 478:	56 9a       	sbi	0x0a, 6	; 10
	DDRD |= (1 << DISPLAY_CLR);
 47a:	57 9a       	sbi	0x0a, 7	; 10
 47c:	08 95       	ret

0000047e <SPI_0_init>:
	SPCR |= (1 << SPE);
}

void SPI_0_disable()
{
	SPCR &= ~(1 << SPE);
 47e:	8c e2       	ldi	r24, 0x2C	; 44
 480:	84 b9       	out	0x04, r24	; 4
 482:	e4 e6       	ldi	r30, 0x64	; 100
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	80 81       	ld	r24, Z
 488:	8b 7f       	andi	r24, 0xFB	; 251
 48a:	80 83       	st	Z, r24
 48c:	80 e5       	ldi	r24, 0x50	; 80
 48e:	8c bd       	out	0x2c, r24	; 44
 490:	1d bc       	out	0x2d, r1	; 45
 492:	08 95       	ret

00000494 <SPI_0_write>:
}

void SPI_0_write(uint8_t data)
{
	SPDR = data;
 494:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF) ));	/* Wait until transmission complete */
 496:	0d b4       	in	r0, 0x2d	; 45
 498:	07 fe       	sbrs	r0, 7
 49a:	fd cf       	rjmp	.-6      	; 0x496 <SPI_0_write+0x2>
 49c:	08 95       	ret

0000049e <TIMER_0_init>:
 */ 
#include <TC_0.h>

void TIMER_0_init(void)
{
	TCCR0A |= (1 << WGM01); // Mode 2, Clear on Timer Compare
 49e:	84 b5       	in	r24, 0x24	; 36
 4a0:	82 60       	ori	r24, 0x02	; 2
 4a2:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01) | (1 << CS00); // Prescaler set to clk/64
 4a4:	85 b5       	in	r24, 0x25	; 37
 4a6:	83 60       	ori	r24, 0x03	; 3
 4a8:	85 bd       	out	0x25, r24	; 37
	//OCR0A = 103; // 2.4 kHz @ 16 MHz system clock
	OCR0A = 129; // 2.4 kHz @ 20 MHz system clock
 4aa:	81 e8       	ldi	r24, 0x81	; 129
 4ac:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);	// Compare A Match Interrupt Enable
 4ae:	ee e6       	ldi	r30, 0x6E	; 110
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	80 81       	ld	r24, Z
 4b4:	82 60       	ori	r24, 0x02	; 2
 4b6:	80 83       	st	Z, r24
 4b8:	08 95       	ret

000004ba <USART_0_init>:
	
	#define BAUD 115200
	#include <util/setbaud.h>
	
	/* Enable USART0 */
	PRR &= ~(1 << PRUSART0);
 4ba:	e4 e6       	ldi	r30, 0x64	; 100
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	80 81       	ld	r24, Z
 4c0:	8d 7f       	andi	r24, 0xFD	; 253
 4c2:	80 83       	st	Z, r24
	
	UBRR0H = UBRRH_VALUE;
 4c4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
 4c8:	80 e1       	ldi	r24, 0x10	; 16
 4ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	UCSR0A = USE_2X << U2X0 /*  */
 4ce:	82 e0       	ldi	r24, 0x02	; 2
 4d0:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
			| (0 << MPCM0);  /* Multi-processor Communication Mode: disabled */

	UCSR0B =  (1 << RXCIE0)    /* RX Complete Interrupt Enable: enabled */
 4d4:	88 e9       	ldi	r24, 0x98	; 152
 4d6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	//		 | (0 << UPM01) | (0 << UPM00) /* Disabled */
	//		 | 0 << USBS0 /* USART Stop Bit Select: disabled */
	//		 | (1 << UCSZ01) | (1 << UCSZ00); /* 8-bit */

	return 0;
}
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	08 95       	ret

000004de <__subsf3>:
 4de:	50 58       	subi	r21, 0x80	; 128

000004e0 <__addsf3>:
 4e0:	bb 27       	eor	r27, r27
 4e2:	aa 27       	eor	r26, r26
 4e4:	0e 94 87 02 	call	0x50e	; 0x50e <__addsf3x>
 4e8:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__fp_round>
 4ec:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__fp_pscA>
 4f0:	38 f0       	brcs	.+14     	; 0x500 <__addsf3+0x20>
 4f2:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__fp_pscB>
 4f6:	20 f0       	brcs	.+8      	; 0x500 <__addsf3+0x20>
 4f8:	39 f4       	brne	.+14     	; 0x508 <__addsf3+0x28>
 4fa:	9f 3f       	cpi	r25, 0xFF	; 255
 4fc:	19 f4       	brne	.+6      	; 0x504 <__addsf3+0x24>
 4fe:	26 f4       	brtc	.+8      	; 0x508 <__addsf3+0x28>
 500:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__fp_nan>
 504:	0e f4       	brtc	.+2      	; 0x508 <__addsf3+0x28>
 506:	e0 95       	com	r30
 508:	e7 fb       	bst	r30, 7
 50a:	0c 94 48 03 	jmp	0x690	; 0x690 <__fp_inf>

0000050e <__addsf3x>:
 50e:	e9 2f       	mov	r30, r25
 510:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__fp_split3>
 514:	58 f3       	brcs	.-42     	; 0x4ec <__addsf3+0xc>
 516:	ba 17       	cp	r27, r26
 518:	62 07       	cpc	r22, r18
 51a:	73 07       	cpc	r23, r19
 51c:	84 07       	cpc	r24, r20
 51e:	95 07       	cpc	r25, r21
 520:	20 f0       	brcs	.+8      	; 0x52a <__addsf3x+0x1c>
 522:	79 f4       	brne	.+30     	; 0x542 <__addsf3x+0x34>
 524:	a6 f5       	brtc	.+104    	; 0x58e <__addsf3x+0x80>
 526:	0c 94 92 03 	jmp	0x724	; 0x724 <__fp_zero>
 52a:	0e f4       	brtc	.+2      	; 0x52e <__addsf3x+0x20>
 52c:	e0 95       	com	r30
 52e:	0b 2e       	mov	r0, r27
 530:	ba 2f       	mov	r27, r26
 532:	a0 2d       	mov	r26, r0
 534:	0b 01       	movw	r0, r22
 536:	b9 01       	movw	r22, r18
 538:	90 01       	movw	r18, r0
 53a:	0c 01       	movw	r0, r24
 53c:	ca 01       	movw	r24, r20
 53e:	a0 01       	movw	r20, r0
 540:	11 24       	eor	r1, r1
 542:	ff 27       	eor	r31, r31
 544:	59 1b       	sub	r21, r25
 546:	99 f0       	breq	.+38     	; 0x56e <__addsf3x+0x60>
 548:	59 3f       	cpi	r21, 0xF9	; 249
 54a:	50 f4       	brcc	.+20     	; 0x560 <__addsf3x+0x52>
 54c:	50 3e       	cpi	r21, 0xE0	; 224
 54e:	68 f1       	brcs	.+90     	; 0x5aa <__addsf3x+0x9c>
 550:	1a 16       	cp	r1, r26
 552:	f0 40       	sbci	r31, 0x00	; 0
 554:	a2 2f       	mov	r26, r18
 556:	23 2f       	mov	r18, r19
 558:	34 2f       	mov	r19, r20
 55a:	44 27       	eor	r20, r20
 55c:	58 5f       	subi	r21, 0xF8	; 248
 55e:	f3 cf       	rjmp	.-26     	; 0x546 <__addsf3x+0x38>
 560:	46 95       	lsr	r20
 562:	37 95       	ror	r19
 564:	27 95       	ror	r18
 566:	a7 95       	ror	r26
 568:	f0 40       	sbci	r31, 0x00	; 0
 56a:	53 95       	inc	r21
 56c:	c9 f7       	brne	.-14     	; 0x560 <__addsf3x+0x52>
 56e:	7e f4       	brtc	.+30     	; 0x58e <__addsf3x+0x80>
 570:	1f 16       	cp	r1, r31
 572:	ba 0b       	sbc	r27, r26
 574:	62 0b       	sbc	r22, r18
 576:	73 0b       	sbc	r23, r19
 578:	84 0b       	sbc	r24, r20
 57a:	ba f0       	brmi	.+46     	; 0x5aa <__addsf3x+0x9c>
 57c:	91 50       	subi	r25, 0x01	; 1
 57e:	a1 f0       	breq	.+40     	; 0x5a8 <__addsf3x+0x9a>
 580:	ff 0f       	add	r31, r31
 582:	bb 1f       	adc	r27, r27
 584:	66 1f       	adc	r22, r22
 586:	77 1f       	adc	r23, r23
 588:	88 1f       	adc	r24, r24
 58a:	c2 f7       	brpl	.-16     	; 0x57c <__addsf3x+0x6e>
 58c:	0e c0       	rjmp	.+28     	; 0x5aa <__addsf3x+0x9c>
 58e:	ba 0f       	add	r27, r26
 590:	62 1f       	adc	r22, r18
 592:	73 1f       	adc	r23, r19
 594:	84 1f       	adc	r24, r20
 596:	48 f4       	brcc	.+18     	; 0x5aa <__addsf3x+0x9c>
 598:	87 95       	ror	r24
 59a:	77 95       	ror	r23
 59c:	67 95       	ror	r22
 59e:	b7 95       	ror	r27
 5a0:	f7 95       	ror	r31
 5a2:	9e 3f       	cpi	r25, 0xFE	; 254
 5a4:	08 f0       	brcs	.+2      	; 0x5a8 <__addsf3x+0x9a>
 5a6:	b0 cf       	rjmp	.-160    	; 0x508 <__addsf3+0x28>
 5a8:	93 95       	inc	r25
 5aa:	88 0f       	add	r24, r24
 5ac:	08 f0       	brcs	.+2      	; 0x5b0 <__addsf3x+0xa2>
 5ae:	99 27       	eor	r25, r25
 5b0:	ee 0f       	add	r30, r30
 5b2:	97 95       	ror	r25
 5b4:	87 95       	ror	r24
 5b6:	08 95       	ret

000005b8 <__fixunssfsi>:
 5b8:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__fp_splitA>
 5bc:	88 f0       	brcs	.+34     	; 0x5e0 <__fixunssfsi+0x28>
 5be:	9f 57       	subi	r25, 0x7F	; 127
 5c0:	98 f0       	brcs	.+38     	; 0x5e8 <__fixunssfsi+0x30>
 5c2:	b9 2f       	mov	r27, r25
 5c4:	99 27       	eor	r25, r25
 5c6:	b7 51       	subi	r27, 0x17	; 23
 5c8:	b0 f0       	brcs	.+44     	; 0x5f6 <__fixunssfsi+0x3e>
 5ca:	e1 f0       	breq	.+56     	; 0x604 <__fixunssfsi+0x4c>
 5cc:	66 0f       	add	r22, r22
 5ce:	77 1f       	adc	r23, r23
 5d0:	88 1f       	adc	r24, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	1a f0       	brmi	.+6      	; 0x5dc <__fixunssfsi+0x24>
 5d6:	ba 95       	dec	r27
 5d8:	c9 f7       	brne	.-14     	; 0x5cc <__fixunssfsi+0x14>
 5da:	14 c0       	rjmp	.+40     	; 0x604 <__fixunssfsi+0x4c>
 5dc:	b1 30       	cpi	r27, 0x01	; 1
 5de:	91 f0       	breq	.+36     	; 0x604 <__fixunssfsi+0x4c>
 5e0:	0e 94 92 03 	call	0x724	; 0x724 <__fp_zero>
 5e4:	b1 e0       	ldi	r27, 0x01	; 1
 5e6:	08 95       	ret
 5e8:	0c 94 92 03 	jmp	0x724	; 0x724 <__fp_zero>
 5ec:	67 2f       	mov	r22, r23
 5ee:	78 2f       	mov	r23, r24
 5f0:	88 27       	eor	r24, r24
 5f2:	b8 5f       	subi	r27, 0xF8	; 248
 5f4:	39 f0       	breq	.+14     	; 0x604 <__fixunssfsi+0x4c>
 5f6:	b9 3f       	cpi	r27, 0xF9	; 249
 5f8:	cc f3       	brlt	.-14     	; 0x5ec <__fixunssfsi+0x34>
 5fa:	86 95       	lsr	r24
 5fc:	77 95       	ror	r23
 5fe:	67 95       	ror	r22
 600:	b3 95       	inc	r27
 602:	d9 f7       	brne	.-10     	; 0x5fa <__fixunssfsi+0x42>
 604:	3e f4       	brtc	.+14     	; 0x614 <__fixunssfsi+0x5c>
 606:	90 95       	com	r25
 608:	80 95       	com	r24
 60a:	70 95       	com	r23
 60c:	61 95       	neg	r22
 60e:	7f 4f       	sbci	r23, 0xFF	; 255
 610:	8f 4f       	sbci	r24, 0xFF	; 255
 612:	9f 4f       	sbci	r25, 0xFF	; 255
 614:	08 95       	ret

00000616 <__floatunsisf>:
 616:	e8 94       	clt
 618:	09 c0       	rjmp	.+18     	; 0x62c <__floatsisf+0x12>

0000061a <__floatsisf>:
 61a:	97 fb       	bst	r25, 7
 61c:	3e f4       	brtc	.+14     	; 0x62c <__floatsisf+0x12>
 61e:	90 95       	com	r25
 620:	80 95       	com	r24
 622:	70 95       	com	r23
 624:	61 95       	neg	r22
 626:	7f 4f       	sbci	r23, 0xFF	; 255
 628:	8f 4f       	sbci	r24, 0xFF	; 255
 62a:	9f 4f       	sbci	r25, 0xFF	; 255
 62c:	99 23       	and	r25, r25
 62e:	a9 f0       	breq	.+42     	; 0x65a <__floatsisf+0x40>
 630:	f9 2f       	mov	r31, r25
 632:	96 e9       	ldi	r25, 0x96	; 150
 634:	bb 27       	eor	r27, r27
 636:	93 95       	inc	r25
 638:	f6 95       	lsr	r31
 63a:	87 95       	ror	r24
 63c:	77 95       	ror	r23
 63e:	67 95       	ror	r22
 640:	b7 95       	ror	r27
 642:	f1 11       	cpse	r31, r1
 644:	f8 cf       	rjmp	.-16     	; 0x636 <__floatsisf+0x1c>
 646:	fa f4       	brpl	.+62     	; 0x686 <__floatsisf+0x6c>
 648:	bb 0f       	add	r27, r27
 64a:	11 f4       	brne	.+4      	; 0x650 <__floatsisf+0x36>
 64c:	60 ff       	sbrs	r22, 0
 64e:	1b c0       	rjmp	.+54     	; 0x686 <__floatsisf+0x6c>
 650:	6f 5f       	subi	r22, 0xFF	; 255
 652:	7f 4f       	sbci	r23, 0xFF	; 255
 654:	8f 4f       	sbci	r24, 0xFF	; 255
 656:	9f 4f       	sbci	r25, 0xFF	; 255
 658:	16 c0       	rjmp	.+44     	; 0x686 <__floatsisf+0x6c>
 65a:	88 23       	and	r24, r24
 65c:	11 f0       	breq	.+4      	; 0x662 <__floatsisf+0x48>
 65e:	96 e9       	ldi	r25, 0x96	; 150
 660:	11 c0       	rjmp	.+34     	; 0x684 <__floatsisf+0x6a>
 662:	77 23       	and	r23, r23
 664:	21 f0       	breq	.+8      	; 0x66e <__floatsisf+0x54>
 666:	9e e8       	ldi	r25, 0x8E	; 142
 668:	87 2f       	mov	r24, r23
 66a:	76 2f       	mov	r23, r22
 66c:	05 c0       	rjmp	.+10     	; 0x678 <__floatsisf+0x5e>
 66e:	66 23       	and	r22, r22
 670:	71 f0       	breq	.+28     	; 0x68e <__floatsisf+0x74>
 672:	96 e8       	ldi	r25, 0x86	; 134
 674:	86 2f       	mov	r24, r22
 676:	70 e0       	ldi	r23, 0x00	; 0
 678:	60 e0       	ldi	r22, 0x00	; 0
 67a:	2a f0       	brmi	.+10     	; 0x686 <__floatsisf+0x6c>
 67c:	9a 95       	dec	r25
 67e:	66 0f       	add	r22, r22
 680:	77 1f       	adc	r23, r23
 682:	88 1f       	adc	r24, r24
 684:	da f7       	brpl	.-10     	; 0x67c <__floatsisf+0x62>
 686:	88 0f       	add	r24, r24
 688:	96 95       	lsr	r25
 68a:	87 95       	ror	r24
 68c:	97 f9       	bld	r25, 7
 68e:	08 95       	ret

00000690 <__fp_inf>:
 690:	97 f9       	bld	r25, 7
 692:	9f 67       	ori	r25, 0x7F	; 127
 694:	80 e8       	ldi	r24, 0x80	; 128
 696:	70 e0       	ldi	r23, 0x00	; 0
 698:	60 e0       	ldi	r22, 0x00	; 0
 69a:	08 95       	ret

0000069c <__fp_nan>:
 69c:	9f ef       	ldi	r25, 0xFF	; 255
 69e:	80 ec       	ldi	r24, 0xC0	; 192
 6a0:	08 95       	ret

000006a2 <__fp_pscA>:
 6a2:	00 24       	eor	r0, r0
 6a4:	0a 94       	dec	r0
 6a6:	16 16       	cp	r1, r22
 6a8:	17 06       	cpc	r1, r23
 6aa:	18 06       	cpc	r1, r24
 6ac:	09 06       	cpc	r0, r25
 6ae:	08 95       	ret

000006b0 <__fp_pscB>:
 6b0:	00 24       	eor	r0, r0
 6b2:	0a 94       	dec	r0
 6b4:	12 16       	cp	r1, r18
 6b6:	13 06       	cpc	r1, r19
 6b8:	14 06       	cpc	r1, r20
 6ba:	05 06       	cpc	r0, r21
 6bc:	08 95       	ret

000006be <__fp_round>:
 6be:	09 2e       	mov	r0, r25
 6c0:	03 94       	inc	r0
 6c2:	00 0c       	add	r0, r0
 6c4:	11 f4       	brne	.+4      	; 0x6ca <__fp_round+0xc>
 6c6:	88 23       	and	r24, r24
 6c8:	52 f0       	brmi	.+20     	; 0x6de <__fp_round+0x20>
 6ca:	bb 0f       	add	r27, r27
 6cc:	40 f4       	brcc	.+16     	; 0x6de <__fp_round+0x20>
 6ce:	bf 2b       	or	r27, r31
 6d0:	11 f4       	brne	.+4      	; 0x6d6 <__fp_round+0x18>
 6d2:	60 ff       	sbrs	r22, 0
 6d4:	04 c0       	rjmp	.+8      	; 0x6de <__fp_round+0x20>
 6d6:	6f 5f       	subi	r22, 0xFF	; 255
 6d8:	7f 4f       	sbci	r23, 0xFF	; 255
 6da:	8f 4f       	sbci	r24, 0xFF	; 255
 6dc:	9f 4f       	sbci	r25, 0xFF	; 255
 6de:	08 95       	ret

000006e0 <__fp_split3>:
 6e0:	57 fd       	sbrc	r21, 7
 6e2:	90 58       	subi	r25, 0x80	; 128
 6e4:	44 0f       	add	r20, r20
 6e6:	55 1f       	adc	r21, r21
 6e8:	59 f0       	breq	.+22     	; 0x700 <__fp_splitA+0x10>
 6ea:	5f 3f       	cpi	r21, 0xFF	; 255
 6ec:	71 f0       	breq	.+28     	; 0x70a <__fp_splitA+0x1a>
 6ee:	47 95       	ror	r20

000006f0 <__fp_splitA>:
 6f0:	88 0f       	add	r24, r24
 6f2:	97 fb       	bst	r25, 7
 6f4:	99 1f       	adc	r25, r25
 6f6:	61 f0       	breq	.+24     	; 0x710 <__fp_splitA+0x20>
 6f8:	9f 3f       	cpi	r25, 0xFF	; 255
 6fa:	79 f0       	breq	.+30     	; 0x71a <__fp_splitA+0x2a>
 6fc:	87 95       	ror	r24
 6fe:	08 95       	ret
 700:	12 16       	cp	r1, r18
 702:	13 06       	cpc	r1, r19
 704:	14 06       	cpc	r1, r20
 706:	55 1f       	adc	r21, r21
 708:	f2 cf       	rjmp	.-28     	; 0x6ee <__fp_split3+0xe>
 70a:	46 95       	lsr	r20
 70c:	f1 df       	rcall	.-30     	; 0x6f0 <__fp_splitA>
 70e:	08 c0       	rjmp	.+16     	; 0x720 <__fp_splitA+0x30>
 710:	16 16       	cp	r1, r22
 712:	17 06       	cpc	r1, r23
 714:	18 06       	cpc	r1, r24
 716:	99 1f       	adc	r25, r25
 718:	f1 cf       	rjmp	.-30     	; 0x6fc <__fp_splitA+0xc>
 71a:	86 95       	lsr	r24
 71c:	71 05       	cpc	r23, r1
 71e:	61 05       	cpc	r22, r1
 720:	08 94       	sec
 722:	08 95       	ret

00000724 <__fp_zero>:
 724:	e8 94       	clt

00000726 <__fp_szero>:
 726:	bb 27       	eor	r27, r27
 728:	66 27       	eor	r22, r22
 72a:	77 27       	eor	r23, r23
 72c:	cb 01       	movw	r24, r22
 72e:	97 f9       	bld	r25, 7
 730:	08 95       	ret

00000732 <__mulsf3>:
 732:	0e 94 ac 03 	call	0x758	; 0x758 <__mulsf3x>
 736:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__fp_round>
 73a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__fp_pscA>
 73e:	38 f0       	brcs	.+14     	; 0x74e <__mulsf3+0x1c>
 740:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__fp_pscB>
 744:	20 f0       	brcs	.+8      	; 0x74e <__mulsf3+0x1c>
 746:	95 23       	and	r25, r21
 748:	11 f0       	breq	.+4      	; 0x74e <__mulsf3+0x1c>
 74a:	0c 94 48 03 	jmp	0x690	; 0x690 <__fp_inf>
 74e:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__fp_nan>
 752:	11 24       	eor	r1, r1
 754:	0c 94 93 03 	jmp	0x726	; 0x726 <__fp_szero>

00000758 <__mulsf3x>:
 758:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__fp_split3>
 75c:	70 f3       	brcs	.-36     	; 0x73a <__mulsf3+0x8>

0000075e <__mulsf3_pse>:
 75e:	95 9f       	mul	r25, r21
 760:	c1 f3       	breq	.-16     	; 0x752 <__mulsf3+0x20>
 762:	95 0f       	add	r25, r21
 764:	50 e0       	ldi	r21, 0x00	; 0
 766:	55 1f       	adc	r21, r21
 768:	62 9f       	mul	r22, r18
 76a:	f0 01       	movw	r30, r0
 76c:	72 9f       	mul	r23, r18
 76e:	bb 27       	eor	r27, r27
 770:	f0 0d       	add	r31, r0
 772:	b1 1d       	adc	r27, r1
 774:	63 9f       	mul	r22, r19
 776:	aa 27       	eor	r26, r26
 778:	f0 0d       	add	r31, r0
 77a:	b1 1d       	adc	r27, r1
 77c:	aa 1f       	adc	r26, r26
 77e:	64 9f       	mul	r22, r20
 780:	66 27       	eor	r22, r22
 782:	b0 0d       	add	r27, r0
 784:	a1 1d       	adc	r26, r1
 786:	66 1f       	adc	r22, r22
 788:	82 9f       	mul	r24, r18
 78a:	22 27       	eor	r18, r18
 78c:	b0 0d       	add	r27, r0
 78e:	a1 1d       	adc	r26, r1
 790:	62 1f       	adc	r22, r18
 792:	73 9f       	mul	r23, r19
 794:	b0 0d       	add	r27, r0
 796:	a1 1d       	adc	r26, r1
 798:	62 1f       	adc	r22, r18
 79a:	83 9f       	mul	r24, r19
 79c:	a0 0d       	add	r26, r0
 79e:	61 1d       	adc	r22, r1
 7a0:	22 1f       	adc	r18, r18
 7a2:	74 9f       	mul	r23, r20
 7a4:	33 27       	eor	r19, r19
 7a6:	a0 0d       	add	r26, r0
 7a8:	61 1d       	adc	r22, r1
 7aa:	23 1f       	adc	r18, r19
 7ac:	84 9f       	mul	r24, r20
 7ae:	60 0d       	add	r22, r0
 7b0:	21 1d       	adc	r18, r1
 7b2:	82 2f       	mov	r24, r18
 7b4:	76 2f       	mov	r23, r22
 7b6:	6a 2f       	mov	r22, r26
 7b8:	11 24       	eor	r1, r1
 7ba:	9f 57       	subi	r25, 0x7F	; 127
 7bc:	50 40       	sbci	r21, 0x00	; 0
 7be:	9a f0       	brmi	.+38     	; 0x7e6 <__mulsf3_pse+0x88>
 7c0:	f1 f0       	breq	.+60     	; 0x7fe <__mulsf3_pse+0xa0>
 7c2:	88 23       	and	r24, r24
 7c4:	4a f0       	brmi	.+18     	; 0x7d8 <__mulsf3_pse+0x7a>
 7c6:	ee 0f       	add	r30, r30
 7c8:	ff 1f       	adc	r31, r31
 7ca:	bb 1f       	adc	r27, r27
 7cc:	66 1f       	adc	r22, r22
 7ce:	77 1f       	adc	r23, r23
 7d0:	88 1f       	adc	r24, r24
 7d2:	91 50       	subi	r25, 0x01	; 1
 7d4:	50 40       	sbci	r21, 0x00	; 0
 7d6:	a9 f7       	brne	.-22     	; 0x7c2 <__mulsf3_pse+0x64>
 7d8:	9e 3f       	cpi	r25, 0xFE	; 254
 7da:	51 05       	cpc	r21, r1
 7dc:	80 f0       	brcs	.+32     	; 0x7fe <__mulsf3_pse+0xa0>
 7de:	0c 94 48 03 	jmp	0x690	; 0x690 <__fp_inf>
 7e2:	0c 94 93 03 	jmp	0x726	; 0x726 <__fp_szero>
 7e6:	5f 3f       	cpi	r21, 0xFF	; 255
 7e8:	e4 f3       	brlt	.-8      	; 0x7e2 <__mulsf3_pse+0x84>
 7ea:	98 3e       	cpi	r25, 0xE8	; 232
 7ec:	d4 f3       	brlt	.-12     	; 0x7e2 <__mulsf3_pse+0x84>
 7ee:	86 95       	lsr	r24
 7f0:	77 95       	ror	r23
 7f2:	67 95       	ror	r22
 7f4:	b7 95       	ror	r27
 7f6:	f7 95       	ror	r31
 7f8:	e7 95       	ror	r30
 7fa:	9f 5f       	subi	r25, 0xFF	; 255
 7fc:	c1 f7       	brne	.-16     	; 0x7ee <__mulsf3_pse+0x90>
 7fe:	fe 2b       	or	r31, r30
 800:	88 0f       	add	r24, r24
 802:	91 1d       	adc	r25, r1
 804:	96 95       	lsr	r25
 806:	87 95       	ror	r24
 808:	97 f9       	bld	r25, 7
 80a:	08 95       	ret

0000080c <round>:
 80c:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__fp_splitA>
 810:	e8 f0       	brcs	.+58     	; 0x84c <round+0x40>
 812:	9e 37       	cpi	r25, 0x7E	; 126
 814:	e8 f0       	brcs	.+58     	; 0x850 <round+0x44>
 816:	96 39       	cpi	r25, 0x96	; 150
 818:	b8 f4       	brcc	.+46     	; 0x848 <round+0x3c>
 81a:	9e 38       	cpi	r25, 0x8E	; 142
 81c:	48 f4       	brcc	.+18     	; 0x830 <round+0x24>
 81e:	67 2f       	mov	r22, r23
 820:	78 2f       	mov	r23, r24
 822:	88 27       	eor	r24, r24
 824:	98 5f       	subi	r25, 0xF8	; 248
 826:	f9 cf       	rjmp	.-14     	; 0x81a <round+0xe>
 828:	86 95       	lsr	r24
 82a:	77 95       	ror	r23
 82c:	67 95       	ror	r22
 82e:	93 95       	inc	r25
 830:	95 39       	cpi	r25, 0x95	; 149
 832:	d0 f3       	brcs	.-12     	; 0x828 <round+0x1c>
 834:	b6 2f       	mov	r27, r22
 836:	b1 70       	andi	r27, 0x01	; 1
 838:	6b 0f       	add	r22, r27
 83a:	71 1d       	adc	r23, r1
 83c:	81 1d       	adc	r24, r1
 83e:	20 f4       	brcc	.+8      	; 0x848 <round+0x3c>
 840:	87 95       	ror	r24
 842:	77 95       	ror	r23
 844:	67 95       	ror	r22
 846:	93 95       	inc	r25
 848:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__fp_mintl>
 84c:	0c 94 8b 04 	jmp	0x916	; 0x916 <__fp_mpack>
 850:	0c 94 93 03 	jmp	0x726	; 0x726 <__fp_szero>
 854:	19 f4       	brne	.+6      	; 0x85c <round+0x50>
 856:	16 f4       	brtc	.+4      	; 0x85c <round+0x50>
 858:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__fp_nan>
 85c:	0c 94 8b 04 	jmp	0x916	; 0x916 <__fp_mpack>

00000860 <sqrt>:
 860:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__fp_splitA>
 864:	b8 f3       	brcs	.-18     	; 0x854 <round+0x48>
 866:	99 23       	and	r25, r25
 868:	c9 f3       	breq	.-14     	; 0x85c <round+0x50>
 86a:	b6 f3       	brts	.-20     	; 0x858 <round+0x4c>
 86c:	9f 57       	subi	r25, 0x7F	; 127
 86e:	55 0b       	sbc	r21, r21
 870:	87 ff       	sbrs	r24, 7
 872:	0e 94 99 04 	call	0x932	; 0x932 <__fp_norm2>
 876:	00 24       	eor	r0, r0
 878:	a0 e6       	ldi	r26, 0x60	; 96
 87a:	40 ea       	ldi	r20, 0xA0	; 160
 87c:	90 01       	movw	r18, r0
 87e:	80 58       	subi	r24, 0x80	; 128
 880:	56 95       	lsr	r21
 882:	97 95       	ror	r25
 884:	28 f4       	brcc	.+10     	; 0x890 <sqrt+0x30>
 886:	80 5c       	subi	r24, 0xC0	; 192
 888:	66 0f       	add	r22, r22
 88a:	77 1f       	adc	r23, r23
 88c:	88 1f       	adc	r24, r24
 88e:	20 f0       	brcs	.+8      	; 0x898 <sqrt+0x38>
 890:	26 17       	cp	r18, r22
 892:	37 07       	cpc	r19, r23
 894:	48 07       	cpc	r20, r24
 896:	30 f4       	brcc	.+12     	; 0x8a4 <sqrt+0x44>
 898:	62 1b       	sub	r22, r18
 89a:	73 0b       	sbc	r23, r19
 89c:	84 0b       	sbc	r24, r20
 89e:	20 29       	or	r18, r0
 8a0:	31 29       	or	r19, r1
 8a2:	4a 2b       	or	r20, r26
 8a4:	a6 95       	lsr	r26
 8a6:	17 94       	ror	r1
 8a8:	07 94       	ror	r0
 8aa:	20 25       	eor	r18, r0
 8ac:	31 25       	eor	r19, r1
 8ae:	4a 27       	eor	r20, r26
 8b0:	58 f7       	brcc	.-42     	; 0x888 <sqrt+0x28>
 8b2:	66 0f       	add	r22, r22
 8b4:	77 1f       	adc	r23, r23
 8b6:	88 1f       	adc	r24, r24
 8b8:	20 f0       	brcs	.+8      	; 0x8c2 <sqrt+0x62>
 8ba:	26 17       	cp	r18, r22
 8bc:	37 07       	cpc	r19, r23
 8be:	48 07       	cpc	r20, r24
 8c0:	30 f4       	brcc	.+12     	; 0x8ce <sqrt+0x6e>
 8c2:	62 0b       	sbc	r22, r18
 8c4:	73 0b       	sbc	r23, r19
 8c6:	84 0b       	sbc	r24, r20
 8c8:	20 0d       	add	r18, r0
 8ca:	31 1d       	adc	r19, r1
 8cc:	41 1d       	adc	r20, r1
 8ce:	a0 95       	com	r26
 8d0:	81 f7       	brne	.-32     	; 0x8b2 <sqrt+0x52>
 8d2:	b9 01       	movw	r22, r18
 8d4:	84 2f       	mov	r24, r20
 8d6:	91 58       	subi	r25, 0x81	; 129
 8d8:	88 0f       	add	r24, r24
 8da:	96 95       	lsr	r25
 8dc:	87 95       	ror	r24
 8de:	08 95       	ret

000008e0 <__fp_mintl>:
 8e0:	88 23       	and	r24, r24
 8e2:	71 f4       	brne	.+28     	; 0x900 <__stack+0x1>
 8e4:	77 23       	and	r23, r23
 8e6:	21 f0       	breq	.+8      	; 0x8f0 <__fp_mintl+0x10>
 8e8:	98 50       	subi	r25, 0x08	; 8
 8ea:	87 2b       	or	r24, r23
 8ec:	76 2f       	mov	r23, r22
 8ee:	07 c0       	rjmp	.+14     	; 0x8fe <__fp_mintl+0x1e>
 8f0:	66 23       	and	r22, r22
 8f2:	11 f4       	brne	.+4      	; 0x8f8 <__fp_mintl+0x18>
 8f4:	99 27       	eor	r25, r25
 8f6:	0d c0       	rjmp	.+26     	; 0x912 <__stack+0x13>
 8f8:	90 51       	subi	r25, 0x10	; 16
 8fa:	86 2b       	or	r24, r22
 8fc:	70 e0       	ldi	r23, 0x00	; 0
 8fe:	60 e0       	ldi	r22, 0x00	; 0
 900:	2a f0       	brmi	.+10     	; 0x90c <__stack+0xd>
 902:	9a 95       	dec	r25
 904:	66 0f       	add	r22, r22
 906:	77 1f       	adc	r23, r23
 908:	88 1f       	adc	r24, r24
 90a:	da f7       	brpl	.-10     	; 0x902 <__stack+0x3>
 90c:	88 0f       	add	r24, r24
 90e:	96 95       	lsr	r25
 910:	87 95       	ror	r24
 912:	97 f9       	bld	r25, 7
 914:	08 95       	ret

00000916 <__fp_mpack>:
 916:	9f 3f       	cpi	r25, 0xFF	; 255
 918:	31 f0       	breq	.+12     	; 0x926 <__fp_mpack_finite+0xc>

0000091a <__fp_mpack_finite>:
 91a:	91 50       	subi	r25, 0x01	; 1
 91c:	20 f4       	brcc	.+8      	; 0x926 <__fp_mpack_finite+0xc>
 91e:	87 95       	ror	r24
 920:	77 95       	ror	r23
 922:	67 95       	ror	r22
 924:	b7 95       	ror	r27
 926:	88 0f       	add	r24, r24
 928:	91 1d       	adc	r25, r1
 92a:	96 95       	lsr	r25
 92c:	87 95       	ror	r24
 92e:	97 f9       	bld	r25, 7
 930:	08 95       	ret

00000932 <__fp_norm2>:
 932:	91 50       	subi	r25, 0x01	; 1
 934:	50 40       	sbci	r21, 0x00	; 0
 936:	66 0f       	add	r22, r22
 938:	77 1f       	adc	r23, r23
 93a:	88 1f       	adc	r24, r24
 93c:	d2 f7       	brpl	.-12     	; 0x932 <__fp_norm2>
 93e:	08 95       	ret

00000940 <__udivmodsi4>:
 940:	a1 e2       	ldi	r26, 0x21	; 33
 942:	1a 2e       	mov	r1, r26
 944:	aa 1b       	sub	r26, r26
 946:	bb 1b       	sub	r27, r27
 948:	fd 01       	movw	r30, r26
 94a:	0d c0       	rjmp	.+26     	; 0x966 <__udivmodsi4_ep>

0000094c <__udivmodsi4_loop>:
 94c:	aa 1f       	adc	r26, r26
 94e:	bb 1f       	adc	r27, r27
 950:	ee 1f       	adc	r30, r30
 952:	ff 1f       	adc	r31, r31
 954:	a2 17       	cp	r26, r18
 956:	b3 07       	cpc	r27, r19
 958:	e4 07       	cpc	r30, r20
 95a:	f5 07       	cpc	r31, r21
 95c:	20 f0       	brcs	.+8      	; 0x966 <__udivmodsi4_ep>
 95e:	a2 1b       	sub	r26, r18
 960:	b3 0b       	sbc	r27, r19
 962:	e4 0b       	sbc	r30, r20
 964:	f5 0b       	sbc	r31, r21

00000966 <__udivmodsi4_ep>:
 966:	66 1f       	adc	r22, r22
 968:	77 1f       	adc	r23, r23
 96a:	88 1f       	adc	r24, r24
 96c:	99 1f       	adc	r25, r25
 96e:	1a 94       	dec	r1
 970:	69 f7       	brne	.-38     	; 0x94c <__udivmodsi4_loop>
 972:	60 95       	com	r22
 974:	70 95       	com	r23
 976:	80 95       	com	r24
 978:	90 95       	com	r25
 97a:	9b 01       	movw	r18, r22
 97c:	ac 01       	movw	r20, r24
 97e:	bd 01       	movw	r22, r26
 980:	cf 01       	movw	r24, r30
 982:	08 95       	ret

00000984 <__umulhisi3>:
 984:	a2 9f       	mul	r26, r18
 986:	b0 01       	movw	r22, r0
 988:	b3 9f       	mul	r27, r19
 98a:	c0 01       	movw	r24, r0
 98c:	a3 9f       	mul	r26, r19
 98e:	70 0d       	add	r23, r0
 990:	81 1d       	adc	r24, r1
 992:	11 24       	eor	r1, r1
 994:	91 1d       	adc	r25, r1
 996:	b2 9f       	mul	r27, r18
 998:	70 0d       	add	r23, r0
 99a:	81 1d       	adc	r24, r1
 99c:	11 24       	eor	r1, r1
 99e:	91 1d       	adc	r25, r1
 9a0:	08 95       	ret

000009a2 <_exit>:
 9a2:	f8 94       	cli

000009a4 <__stop_program>:
 9a4:	ff cf       	rjmp	.-2      	; 0x9a4 <__stop_program>

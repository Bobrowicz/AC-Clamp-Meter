
AC Clamp Meter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000056a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000056a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000056a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000059c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c7a  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090b  00000000  00000000  0000139e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000825  00000000  00000000  00001ca9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000238  00000000  00000000  000024d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005bd  00000000  00000000  00002708  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f8  00000000  00000000  00002cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00002ebd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
uint8_t adc_channel = 0;
volatile uint8_t mode = 0;


int main(void)
{
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	00 d0       	rcall	.+0      	; 0x96 <main+0x6>
  96:	00 d0       	rcall	.+0      	; 0x98 <main+0x8>
  98:	00 d0       	rcall	.+0      	; 0x9a <main+0xa>
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
	i_o_init();
  9e:	0e 94 1a 01 	call	0x234	; 0x234 <i_o_init>
	device_init();
  a2:	0e 94 13 01 	call	0x226	; 0x226 <device_init>
	sei();
  a6:	78 94       	sei
	
	int num = 0;
	long int sum = 0;
	volatile int samples = 40;
  a8:	88 e2       	ldi	r24, 0x28	; 40
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	9a 83       	std	Y+2, r25	; 0x02
  ae:	89 83       	std	Y+1, r24	; 0x01
	volatile uint_fast32_t rms = 0;
  b0:	1b 82       	std	Y+3, r1	; 0x03
  b2:	1c 82       	std	Y+4, r1	; 0x04
  b4:	1d 82       	std	Y+5, r1	; 0x05
  b6:	1e 82       	std	Y+6, r1	; 0x06
	
	mode = MODE_IDLE;
  b8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	ADC_select_channel(adc_channel);
  bc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <adc_channel>
  c0:	0e 94 02 01 	call	0x204	; 0x204 <ADC_select_channel>
	i_o_init();
	device_init();
	sei();
	
	int num = 0;
	long int sum = 0;
  c4:	c1 2c       	mov	r12, r1
  c6:	d1 2c       	mov	r13, r1
  c8:	76 01       	movw	r14, r12
				break;
				
			case MODE_CALCULATE:
				PORTD |= (1 << INSTRUMENTATION_OUT);
				cli();
				rms = sum/40;
  ca:	0f 2e       	mov	r0, r31
  cc:	f8 e2       	ldi	r31, 0x28	; 40
  ce:	8f 2e       	mov	r8, r31
  d0:	91 2c       	mov	r9, r1
  d2:	a1 2c       	mov	r10, r1
  d4:	b1 2c       	mov	r11, r1
  d6:	f0 2d       	mov	r31, r0
				uint8_t i = 0;
				for(i=0; i<2; i++){
					USART_0_write((rms>>(i*8)) & 0xff);
				}
				sum = 0;
				samples = 40;
  d8:	08 e2       	ldi	r16, 0x28	; 40
  da:	10 e0       	ldi	r17, 0x00	; 0
				//num = ADC_get_conversion(adc_channel);
				num = ADC_get_conversion_result();
				sum += (num * num);
				samples -= 1;
				if(samples == 0) {
					mode = MODE_CALCULATE;
  dc:	68 94       	set
  de:	77 24       	eor	r7, r7
  e0:	71 f8       	bld	r7, 1
	mode = MODE_IDLE;
	ADC_select_channel(adc_channel);
	
	while (1)
	{
		switch(mode)
  e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	39 f0       	breq	.+14     	; 0xf8 <main+0x68>
  ea:	d8 f3       	brcs	.-10     	; 0xe2 <main+0x52>
  ec:	82 30       	cpi	r24, 0x02	; 2
  ee:	21 f1       	breq	.+72     	; 0x138 <main+0xa8>
  f0:	83 30       	cpi	r24, 0x03	; 3
  f2:	09 f0       	breq	.+2      	; 0xf6 <main+0x66>
  f4:	54 c0       	rjmp	.+168    	; 0x19e <main+0x10e>
  f6:	f5 cf       	rjmp	.-22     	; 0xe2 <main+0x52>
		{
			case MODE_MEASURE:
				//PORTD |= (1 << INSTRUMENTATION_OUT);
				//num = ADC_get_conversion(adc_channel);
				num = ADC_get_conversion_result();
  f8:	0e 94 0a 01 	call	0x214	; 0x214 <ADC_get_conversion_result>
				sum += (num * num);
  fc:	9c 01       	movw	r18, r24
  fe:	22 9f       	mul	r18, r18
 100:	c0 01       	movw	r24, r0
 102:	23 9f       	mul	r18, r19
 104:	90 0d       	add	r25, r0
 106:	90 0d       	add	r25, r0
 108:	11 24       	eor	r1, r1
 10a:	09 2e       	mov	r0, r25
 10c:	00 0c       	add	r0, r0
 10e:	aa 0b       	sbc	r26, r26
 110:	bb 0b       	sbc	r27, r27
 112:	c8 0e       	add	r12, r24
 114:	d9 1e       	adc	r13, r25
 116:	ea 1e       	adc	r14, r26
 118:	fb 1e       	adc	r15, r27
				samples -= 1;
 11a:	89 81       	ldd	r24, Y+1	; 0x01
 11c:	9a 81       	ldd	r25, Y+2	; 0x02
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	9a 83       	std	Y+2, r25	; 0x02
 122:	89 83       	std	Y+1, r24	; 0x01
				if(samples == 0) {
 124:	89 81       	ldd	r24, Y+1	; 0x01
 126:	9a 81       	ldd	r25, Y+2	; 0x02
 128:	89 2b       	or	r24, r25
 12a:	19 f4       	brne	.+6      	; 0x132 <main+0xa2>
					mode = MODE_CALCULATE;
 12c:	70 92 00 01 	sts	0x0100, r7	; 0x800100 <_edata>
 130:	d8 cf       	rjmp	.-80     	; 0xe2 <main+0x52>
				} else {
					mode = MODE_IDLE;
 132:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 136:	d5 cf       	rjmp	.-86     	; 0xe2 <main+0x52>
				}
				//PORTD &= ~(1 << INSTRUMENTATION_OUT);
				break;
				
			case MODE_CALCULATE:
				PORTD |= (1 << INSTRUMENTATION_OUT);
 138:	5e 9a       	sbi	0x0b, 6	; 11
				cli();
 13a:	f8 94       	cli
				rms = sum/40;
 13c:	c7 01       	movw	r24, r14
 13e:	b6 01       	movw	r22, r12
 140:	a5 01       	movw	r20, r10
 142:	94 01       	movw	r18, r8
 144:	0e 94 38 02 	call	0x470	; 0x470 <__divmodsi4>
 148:	2b 83       	std	Y+3, r18	; 0x03
 14a:	3c 83       	std	Y+4, r19	; 0x04
 14c:	4d 83       	std	Y+5, r20	; 0x05
 14e:	5e 83       	std	Y+6, r21	; 0x06
				rms = sqrt(rms);
 150:	cb 80       	ldd	r12, Y+3	; 0x03
 152:	dc 80       	ldd	r13, Y+4	; 0x04
 154:	ed 80       	ldd	r14, Y+5	; 0x05
 156:	fe 80       	ldd	r15, Y+6	; 0x06
 158:	c7 01       	movw	r24, r14
 15a:	b6 01       	movw	r22, r12
 15c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <__floatunsisf>
 160:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <sqrt>
 164:	0e 94 45 01 	call	0x28a	; 0x28a <__fixunssfsi>
 168:	6b 83       	std	Y+3, r22	; 0x03
 16a:	7c 83       	std	Y+4, r23	; 0x04
 16c:	8d 83       	std	Y+5, r24	; 0x05
 16e:	9e 83       	std	Y+6, r25	; 0x06
				uint8_t i = 0;
				for(i=0; i<2; i++){
					USART_0_write((rms>>(i*8)) & 0xff);
 170:	8b 81       	ldd	r24, Y+3	; 0x03
 172:	9c 81       	ldd	r25, Y+4	; 0x04
 174:	ad 81       	ldd	r26, Y+5	; 0x05
 176:	be 81       	ldd	r27, Y+6	; 0x06
 178:	0e 94 3d 01 	call	0x27a	; 0x27a <USART_0_write>
 17c:	8b 81       	ldd	r24, Y+3	; 0x03
 17e:	9c 81       	ldd	r25, Y+4	; 0x04
 180:	ad 81       	ldd	r26, Y+5	; 0x05
 182:	be 81       	ldd	r27, Y+6	; 0x06
 184:	89 2f       	mov	r24, r25
 186:	0e 94 3d 01 	call	0x27a	; 0x27a <USART_0_write>
				}
				sum = 0;
				samples = 40;
 18a:	1a 83       	std	Y+2, r17	; 0x02
 18c:	09 83       	std	Y+1, r16	; 0x01
				sei();
 18e:	78 94       	sei
				mode = MODE_IDLE;
 190:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
				PORTD &= ~(1 << INSTRUMENTATION_OUT);
 194:	5e 98       	cbi	0x0b, 6	; 11
				rms = sqrt(rms);
				uint8_t i = 0;
				for(i=0; i<2; i++){
					USART_0_write((rms>>(i*8)) & 0xff);
				}
				sum = 0;
 196:	c1 2c       	mov	r12, r1
 198:	d1 2c       	mov	r13, r1
 19a:	76 01       	movw	r14, r12
				samples = 40;
				sei();
				mode = MODE_IDLE;
				PORTD &= ~(1 << INSTRUMENTATION_OUT);
				break;
 19c:	a2 cf       	rjmp	.-188    	; 0xe2 <main+0x52>
			case MODE_IDLE:
				;
				break;
				
			default:
				PORTD |= (1 << ERROR);
 19e:	5c 9a       	sbi	0x0b, 4	; 11
 1a0:	a0 cf       	rjmp	.-192    	; 0xe2 <main+0x52>

000001a2 <__vector_14>:
	}
	return 0;
}

ISR(TIMER0_COMPA_vect)
{
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
 1ac:	8f 93       	push	r24
 1ae:	9f 93       	push	r25
	//mode = MODE_MEASURE;
	PORTD ^= (1 << ADC_CLK_OUT);
 1b0:	9b b1       	in	r25, 0x0b	; 11
 1b2:	80 e2       	ldi	r24, 0x20	; 32
 1b4:	89 27       	eor	r24, r25
 1b6:	8b b9       	out	0x0b, r24	; 11
}
 1b8:	9f 91       	pop	r25
 1ba:	8f 91       	pop	r24
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <__vector_21>:

ISR(ADC_vect)
{
 1c6:	1f 92       	push	r1
 1c8:	0f 92       	push	r0
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	0f 92       	push	r0
 1ce:	11 24       	eor	r1, r1
 1d0:	8f 93       	push	r24
	mode = MODE_MEASURE;
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	//PORTD ^= (1 << INSTRUMENTATION_OUT);
 1d8:	8f 91       	pop	r24
 1da:	0f 90       	pop	r0
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	0f 90       	pop	r0
 1e0:	1f 90       	pop	r1
 1e2:	18 95       	reti

000001e4 <ADC_init>:
}

uint8_t ADC_is_conversion_done()
{
	return ((ADCSRA & (1 << ADIF)));
}
 1e4:	80 e4       	ldi	r24, 0x40	; 64
 1e6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 1ea:	8f ea       	ldi	r24, 0xAF	; 175
 1ec:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 1f0:	83 e0       	ldi	r24, 0x03	; 3
 1f2:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
 1f6:	08 95       	ret

000001f8 <ADC_clear_interrupt_flag>:
 1f8:	ea e7       	ldi	r30, 0x7A	; 122
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	80 61       	ori	r24, 0x10	; 16
 200:	80 83       	st	Z, r24
 202:	08 95       	ret

00000204 <ADC_select_channel>:
 204:	ec e7       	ldi	r30, 0x7C	; 124
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	90 81       	ld	r25, Z
 20a:	90 7f       	andi	r25, 0xF0	; 240
 20c:	8f 70       	andi	r24, 0x0F	; 15
 20e:	89 2b       	or	r24, r25
 210:	80 83       	st	Z, r24
 212:	08 95       	ret

00000214 <ADC_get_conversion_result>:

uint16_t ADC_get_conversion_result()
{
	ADC_clear_interrupt_flag();
 214:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <ADC_clear_interrupt_flag>
	return (ADCL | ADCH << 8);
 218:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 21c:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 220:	90 e0       	ldi	r25, 0x00	; 0
}
 222:	92 2b       	or	r25, r18
 224:	08 95       	ret

00000226 <device_init>:

#include "setup.h"

void device_init()
{
	timer_0_init();
 226:	0e 94 1e 01 	call	0x23c	; 0x23c <timer_0_init>
	ADC_init();
 22a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <ADC_init>
	USART_0_init();
 22e:	0e 94 2c 01 	call	0x258	; 0x258 <USART_0_init>
 232:	08 95       	ret

00000234 <i_o_init>:
}

void i_o_init()
{
	DDRD |= (1 << ADC_CLK_OUT);
 234:	55 9a       	sbi	0x0a, 5	; 10
	DDRD |= (1 << INSTRUMENTATION_OUT);
 236:	56 9a       	sbi	0x0a, 6	; 10
	DDRD |= (1 << ERROR);
 238:	54 9a       	sbi	0x0a, 4	; 10
 23a:	08 95       	ret

0000023c <timer_0_init>:
 23c:	84 b5       	in	r24, 0x24	; 36
 23e:	82 60       	ori	r24, 0x02	; 2
 240:	84 bd       	out	0x24, r24	; 36
 242:	85 b5       	in	r24, 0x25	; 37
 244:	83 60       	ori	r24, 0x03	; 3
 246:	85 bd       	out	0x25, r24	; 37
 248:	87 e6       	ldi	r24, 0x67	; 103
 24a:	87 bd       	out	0x27, r24	; 39
 24c:	ee e6       	ldi	r30, 0x6E	; 110
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	80 81       	ld	r24, Z
 252:	82 60       	ori	r24, 0x02	; 2
 254:	80 83       	st	Z, r24
 256:	08 95       	ret

00000258 <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(UCSR0A & (1 << RXC0)))
	;
	return UDR0;
}
 258:	e4 e6       	ldi	r30, 0x64	; 100
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	8d 7f       	andi	r24, 0xFD	; 253
 260:	80 83       	st	Z, r24
 262:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 266:	87 e6       	ldi	r24, 0x67	; 103
 268:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 26c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 270:	88 e9       	ldi	r24, 0x98	; 152
 272:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	08 95       	ret

0000027a <USART_0_write>:

void USART_0_write(const uint8_t data)
{
	while (!(UCSR0A & (1 << UDRE0)))
 27a:	e0 ec       	ldi	r30, 0xC0	; 192
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	90 81       	ld	r25, Z
 280:	95 ff       	sbrs	r25, 5
 282:	fd cf       	rjmp	.-6      	; 0x27e <USART_0_write+0x4>
	;
	UDR0 = data;
 284:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 288:	08 95       	ret

0000028a <__fixunssfsi>:
 28a:	0e 94 b9 01 	call	0x372	; 0x372 <__fp_splitA>
 28e:	88 f0       	brcs	.+34     	; 0x2b2 <__fixunssfsi+0x28>
 290:	9f 57       	subi	r25, 0x7F	; 127
 292:	98 f0       	brcs	.+38     	; 0x2ba <__fixunssfsi+0x30>
 294:	b9 2f       	mov	r27, r25
 296:	99 27       	eor	r25, r25
 298:	b7 51       	subi	r27, 0x17	; 23
 29a:	b0 f0       	brcs	.+44     	; 0x2c8 <__fixunssfsi+0x3e>
 29c:	e1 f0       	breq	.+56     	; 0x2d6 <__fixunssfsi+0x4c>
 29e:	66 0f       	add	r22, r22
 2a0:	77 1f       	adc	r23, r23
 2a2:	88 1f       	adc	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	1a f0       	brmi	.+6      	; 0x2ae <__fixunssfsi+0x24>
 2a8:	ba 95       	dec	r27
 2aa:	c9 f7       	brne	.-14     	; 0x29e <__fixunssfsi+0x14>
 2ac:	14 c0       	rjmp	.+40     	; 0x2d6 <__fixunssfsi+0x4c>
 2ae:	b1 30       	cpi	r27, 0x01	; 1
 2b0:	91 f0       	breq	.+36     	; 0x2d6 <__fixunssfsi+0x4c>
 2b2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__fp_zero>
 2b6:	b1 e0       	ldi	r27, 0x01	; 1
 2b8:	08 95       	ret
 2ba:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__fp_zero>
 2be:	67 2f       	mov	r22, r23
 2c0:	78 2f       	mov	r23, r24
 2c2:	88 27       	eor	r24, r24
 2c4:	b8 5f       	subi	r27, 0xF8	; 248
 2c6:	39 f0       	breq	.+14     	; 0x2d6 <__fixunssfsi+0x4c>
 2c8:	b9 3f       	cpi	r27, 0xF9	; 249
 2ca:	cc f3       	brlt	.-14     	; 0x2be <__fixunssfsi+0x34>
 2cc:	86 95       	lsr	r24
 2ce:	77 95       	ror	r23
 2d0:	67 95       	ror	r22
 2d2:	b3 95       	inc	r27
 2d4:	d9 f7       	brne	.-10     	; 0x2cc <__fixunssfsi+0x42>
 2d6:	3e f4       	brtc	.+14     	; 0x2e6 <__fixunssfsi+0x5c>
 2d8:	90 95       	com	r25
 2da:	80 95       	com	r24
 2dc:	70 95       	com	r23
 2de:	61 95       	neg	r22
 2e0:	7f 4f       	sbci	r23, 0xFF	; 255
 2e2:	8f 4f       	sbci	r24, 0xFF	; 255
 2e4:	9f 4f       	sbci	r25, 0xFF	; 255
 2e6:	08 95       	ret

000002e8 <__floatunsisf>:
 2e8:	e8 94       	clt
 2ea:	09 c0       	rjmp	.+18     	; 0x2fe <__floatsisf+0x12>

000002ec <__floatsisf>:
 2ec:	97 fb       	bst	r25, 7
 2ee:	3e f4       	brtc	.+14     	; 0x2fe <__floatsisf+0x12>
 2f0:	90 95       	com	r25
 2f2:	80 95       	com	r24
 2f4:	70 95       	com	r23
 2f6:	61 95       	neg	r22
 2f8:	7f 4f       	sbci	r23, 0xFF	; 255
 2fa:	8f 4f       	sbci	r24, 0xFF	; 255
 2fc:	9f 4f       	sbci	r25, 0xFF	; 255
 2fe:	99 23       	and	r25, r25
 300:	a9 f0       	breq	.+42     	; 0x32c <__floatsisf+0x40>
 302:	f9 2f       	mov	r31, r25
 304:	96 e9       	ldi	r25, 0x96	; 150
 306:	bb 27       	eor	r27, r27
 308:	93 95       	inc	r25
 30a:	f6 95       	lsr	r31
 30c:	87 95       	ror	r24
 30e:	77 95       	ror	r23
 310:	67 95       	ror	r22
 312:	b7 95       	ror	r27
 314:	f1 11       	cpse	r31, r1
 316:	f8 cf       	rjmp	.-16     	; 0x308 <__floatsisf+0x1c>
 318:	fa f4       	brpl	.+62     	; 0x358 <__floatsisf+0x6c>
 31a:	bb 0f       	add	r27, r27
 31c:	11 f4       	brne	.+4      	; 0x322 <__floatsisf+0x36>
 31e:	60 ff       	sbrs	r22, 0
 320:	1b c0       	rjmp	.+54     	; 0x358 <__floatsisf+0x6c>
 322:	6f 5f       	subi	r22, 0xFF	; 255
 324:	7f 4f       	sbci	r23, 0xFF	; 255
 326:	8f 4f       	sbci	r24, 0xFF	; 255
 328:	9f 4f       	sbci	r25, 0xFF	; 255
 32a:	16 c0       	rjmp	.+44     	; 0x358 <__floatsisf+0x6c>
 32c:	88 23       	and	r24, r24
 32e:	11 f0       	breq	.+4      	; 0x334 <__floatsisf+0x48>
 330:	96 e9       	ldi	r25, 0x96	; 150
 332:	11 c0       	rjmp	.+34     	; 0x356 <__floatsisf+0x6a>
 334:	77 23       	and	r23, r23
 336:	21 f0       	breq	.+8      	; 0x340 <__floatsisf+0x54>
 338:	9e e8       	ldi	r25, 0x8E	; 142
 33a:	87 2f       	mov	r24, r23
 33c:	76 2f       	mov	r23, r22
 33e:	05 c0       	rjmp	.+10     	; 0x34a <__floatsisf+0x5e>
 340:	66 23       	and	r22, r22
 342:	71 f0       	breq	.+28     	; 0x360 <__floatsisf+0x74>
 344:	96 e8       	ldi	r25, 0x86	; 134
 346:	86 2f       	mov	r24, r22
 348:	70 e0       	ldi	r23, 0x00	; 0
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	2a f0       	brmi	.+10     	; 0x358 <__floatsisf+0x6c>
 34e:	9a 95       	dec	r25
 350:	66 0f       	add	r22, r22
 352:	77 1f       	adc	r23, r23
 354:	88 1f       	adc	r24, r24
 356:	da f7       	brpl	.-10     	; 0x34e <__floatsisf+0x62>
 358:	88 0f       	add	r24, r24
 35a:	96 95       	lsr	r25
 35c:	87 95       	ror	r24
 35e:	97 f9       	bld	r25, 7
 360:	08 95       	ret

00000362 <__fp_split3>:
 362:	57 fd       	sbrc	r21, 7
 364:	90 58       	subi	r25, 0x80	; 128
 366:	44 0f       	add	r20, r20
 368:	55 1f       	adc	r21, r21
 36a:	59 f0       	breq	.+22     	; 0x382 <__fp_splitA+0x10>
 36c:	5f 3f       	cpi	r21, 0xFF	; 255
 36e:	71 f0       	breq	.+28     	; 0x38c <__fp_splitA+0x1a>
 370:	47 95       	ror	r20

00000372 <__fp_splitA>:
 372:	88 0f       	add	r24, r24
 374:	97 fb       	bst	r25, 7
 376:	99 1f       	adc	r25, r25
 378:	61 f0       	breq	.+24     	; 0x392 <__fp_splitA+0x20>
 37a:	9f 3f       	cpi	r25, 0xFF	; 255
 37c:	79 f0       	breq	.+30     	; 0x39c <__fp_splitA+0x2a>
 37e:	87 95       	ror	r24
 380:	08 95       	ret
 382:	12 16       	cp	r1, r18
 384:	13 06       	cpc	r1, r19
 386:	14 06       	cpc	r1, r20
 388:	55 1f       	adc	r21, r21
 38a:	f2 cf       	rjmp	.-28     	; 0x370 <__fp_split3+0xe>
 38c:	46 95       	lsr	r20
 38e:	f1 df       	rcall	.-30     	; 0x372 <__fp_splitA>
 390:	08 c0       	rjmp	.+16     	; 0x3a2 <__fp_splitA+0x30>
 392:	16 16       	cp	r1, r22
 394:	17 06       	cpc	r1, r23
 396:	18 06       	cpc	r1, r24
 398:	99 1f       	adc	r25, r25
 39a:	f1 cf       	rjmp	.-30     	; 0x37e <__fp_splitA+0xc>
 39c:	86 95       	lsr	r24
 39e:	71 05       	cpc	r23, r1
 3a0:	61 05       	cpc	r22, r1
 3a2:	08 94       	sec
 3a4:	08 95       	ret

000003a6 <__fp_zero>:
 3a6:	e8 94       	clt

000003a8 <__fp_szero>:
 3a8:	bb 27       	eor	r27, r27
 3aa:	66 27       	eor	r22, r22
 3ac:	77 27       	eor	r23, r23
 3ae:	cb 01       	movw	r24, r22
 3b0:	97 f9       	bld	r25, 7
 3b2:	08 95       	ret
 3b4:	19 f4       	brne	.+6      	; 0x3bc <__fp_szero+0x14>
 3b6:	16 f4       	brtc	.+4      	; 0x3bc <__fp_szero+0x14>
 3b8:	0c 94 2e 02 	jmp	0x45c	; 0x45c <__fp_nan>
 3bc:	0c 94 20 02 	jmp	0x440	; 0x440 <__fp_mpack>

000003c0 <sqrt>:
 3c0:	0e 94 b9 01 	call	0x372	; 0x372 <__fp_splitA>
 3c4:	b8 f3       	brcs	.-18     	; 0x3b4 <__fp_szero+0xc>
 3c6:	99 23       	and	r25, r25
 3c8:	c9 f3       	breq	.-14     	; 0x3bc <__fp_szero+0x14>
 3ca:	b6 f3       	brts	.-20     	; 0x3b8 <__fp_szero+0x10>
 3cc:	9f 57       	subi	r25, 0x7F	; 127
 3ce:	55 0b       	sbc	r21, r21
 3d0:	87 ff       	sbrs	r24, 7
 3d2:	0e 94 31 02 	call	0x462	; 0x462 <__fp_norm2>
 3d6:	00 24       	eor	r0, r0
 3d8:	a0 e6       	ldi	r26, 0x60	; 96
 3da:	40 ea       	ldi	r20, 0xA0	; 160
 3dc:	90 01       	movw	r18, r0
 3de:	80 58       	subi	r24, 0x80	; 128
 3e0:	56 95       	lsr	r21
 3e2:	97 95       	ror	r25
 3e4:	28 f4       	brcc	.+10     	; 0x3f0 <sqrt+0x30>
 3e6:	80 5c       	subi	r24, 0xC0	; 192
 3e8:	66 0f       	add	r22, r22
 3ea:	77 1f       	adc	r23, r23
 3ec:	88 1f       	adc	r24, r24
 3ee:	20 f0       	brcs	.+8      	; 0x3f8 <sqrt+0x38>
 3f0:	26 17       	cp	r18, r22
 3f2:	37 07       	cpc	r19, r23
 3f4:	48 07       	cpc	r20, r24
 3f6:	30 f4       	brcc	.+12     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3f8:	62 1b       	sub	r22, r18
 3fa:	73 0b       	sbc	r23, r19
 3fc:	84 0b       	sbc	r24, r20
 3fe:	20 29       	or	r18, r0
 400:	31 29       	or	r19, r1
 402:	4a 2b       	or	r20, r26
 404:	a6 95       	lsr	r26
 406:	17 94       	ror	r1
 408:	07 94       	ror	r0
 40a:	20 25       	eor	r18, r0
 40c:	31 25       	eor	r19, r1
 40e:	4a 27       	eor	r20, r26
 410:	58 f7       	brcc	.-42     	; 0x3e8 <sqrt+0x28>
 412:	66 0f       	add	r22, r22
 414:	77 1f       	adc	r23, r23
 416:	88 1f       	adc	r24, r24
 418:	20 f0       	brcs	.+8      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 41a:	26 17       	cp	r18, r22
 41c:	37 07       	cpc	r19, r23
 41e:	48 07       	cpc	r20, r24
 420:	30 f4       	brcc	.+12     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 422:	62 0b       	sbc	r22, r18
 424:	73 0b       	sbc	r23, r19
 426:	84 0b       	sbc	r24, r20
 428:	20 0d       	add	r18, r0
 42a:	31 1d       	adc	r19, r1
 42c:	41 1d       	adc	r20, r1
 42e:	a0 95       	com	r26
 430:	81 f7       	brne	.-32     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 432:	b9 01       	movw	r22, r18
 434:	84 2f       	mov	r24, r20
 436:	91 58       	subi	r25, 0x81	; 129
 438:	88 0f       	add	r24, r24
 43a:	96 95       	lsr	r25
 43c:	87 95       	ror	r24
 43e:	08 95       	ret

00000440 <__fp_mpack>:
 440:	9f 3f       	cpi	r25, 0xFF	; 255
 442:	31 f0       	breq	.+12     	; 0x450 <__fp_mpack_finite+0xc>

00000444 <__fp_mpack_finite>:
 444:	91 50       	subi	r25, 0x01	; 1
 446:	20 f4       	brcc	.+8      	; 0x450 <__fp_mpack_finite+0xc>
 448:	87 95       	ror	r24
 44a:	77 95       	ror	r23
 44c:	67 95       	ror	r22
 44e:	b7 95       	ror	r27
 450:	88 0f       	add	r24, r24
 452:	91 1d       	adc	r25, r1
 454:	96 95       	lsr	r25
 456:	87 95       	ror	r24
 458:	97 f9       	bld	r25, 7
 45a:	08 95       	ret

0000045c <__fp_nan>:
 45c:	9f ef       	ldi	r25, 0xFF	; 255
 45e:	80 ec       	ldi	r24, 0xC0	; 192
 460:	08 95       	ret

00000462 <__fp_norm2>:
 462:	91 50       	subi	r25, 0x01	; 1
 464:	50 40       	sbci	r21, 0x00	; 0
 466:	66 0f       	add	r22, r22
 468:	77 1f       	adc	r23, r23
 46a:	88 1f       	adc	r24, r24
 46c:	d2 f7       	brpl	.-12     	; 0x462 <__fp_norm2>
 46e:	08 95       	ret

00000470 <__divmodsi4>:
 470:	05 2e       	mov	r0, r21
 472:	97 fb       	bst	r25, 7
 474:	1e f4       	brtc	.+6      	; 0x47c <__divmodsi4+0xc>
 476:	00 94       	com	r0
 478:	0e 94 4f 02 	call	0x49e	; 0x49e <__negsi2>
 47c:	57 fd       	sbrc	r21, 7
 47e:	07 d0       	rcall	.+14     	; 0x48e <__divmodsi4_neg2>
 480:	0e 94 57 02 	call	0x4ae	; 0x4ae <__udivmodsi4>
 484:	07 fc       	sbrc	r0, 7
 486:	03 d0       	rcall	.+6      	; 0x48e <__divmodsi4_neg2>
 488:	4e f4       	brtc	.+18     	; 0x49c <__divmodsi4_exit>
 48a:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__negsi2>

0000048e <__divmodsi4_neg2>:
 48e:	50 95       	com	r21
 490:	40 95       	com	r20
 492:	30 95       	com	r19
 494:	21 95       	neg	r18
 496:	3f 4f       	sbci	r19, 0xFF	; 255
 498:	4f 4f       	sbci	r20, 0xFF	; 255
 49a:	5f 4f       	sbci	r21, 0xFF	; 255

0000049c <__divmodsi4_exit>:
 49c:	08 95       	ret

0000049e <__negsi2>:
 49e:	90 95       	com	r25
 4a0:	80 95       	com	r24
 4a2:	70 95       	com	r23
 4a4:	61 95       	neg	r22
 4a6:	7f 4f       	sbci	r23, 0xFF	; 255
 4a8:	8f 4f       	sbci	r24, 0xFF	; 255
 4aa:	9f 4f       	sbci	r25, 0xFF	; 255
 4ac:	08 95       	ret

000004ae <__udivmodsi4>:
 4ae:	a1 e2       	ldi	r26, 0x21	; 33
 4b0:	1a 2e       	mov	r1, r26
 4b2:	aa 1b       	sub	r26, r26
 4b4:	bb 1b       	sub	r27, r27
 4b6:	fd 01       	movw	r30, r26
 4b8:	0d c0       	rjmp	.+26     	; 0x4d4 <__udivmodsi4_ep>

000004ba <__udivmodsi4_loop>:
 4ba:	aa 1f       	adc	r26, r26
 4bc:	bb 1f       	adc	r27, r27
 4be:	ee 1f       	adc	r30, r30
 4c0:	ff 1f       	adc	r31, r31
 4c2:	a2 17       	cp	r26, r18
 4c4:	b3 07       	cpc	r27, r19
 4c6:	e4 07       	cpc	r30, r20
 4c8:	f5 07       	cpc	r31, r21
 4ca:	20 f0       	brcs	.+8      	; 0x4d4 <__udivmodsi4_ep>
 4cc:	a2 1b       	sub	r26, r18
 4ce:	b3 0b       	sbc	r27, r19
 4d0:	e4 0b       	sbc	r30, r20
 4d2:	f5 0b       	sbc	r31, r21

000004d4 <__udivmodsi4_ep>:
 4d4:	66 1f       	adc	r22, r22
 4d6:	77 1f       	adc	r23, r23
 4d8:	88 1f       	adc	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	1a 94       	dec	r1
 4de:	69 f7       	brne	.-38     	; 0x4ba <__udivmodsi4_loop>
 4e0:	60 95       	com	r22
 4e2:	70 95       	com	r23
 4e4:	80 95       	com	r24
 4e6:	90 95       	com	r25
 4e8:	9b 01       	movw	r18, r22
 4ea:	ac 01       	movw	r20, r24
 4ec:	bd 01       	movw	r22, r26
 4ee:	cf 01       	movw	r24, r30
 4f0:	08 95       	ret

000004f2 <_exit>:
 4f2:	f8 94       	cli

000004f4 <__stop_program>:
 4f4:	ff cf       	rjmp	.-2      	; 0x4f4 <__stop_program>

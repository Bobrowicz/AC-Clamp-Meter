
AC Clamp Meter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000410  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000484  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a4f  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086a  00000000  00000000  00001013  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005d5  00000000  00000000  0000187d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  00001e54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d2  00000000  00000000  00001fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000017a  00000000  00000000  0000247a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000025f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 06 02 	jmp	0x40c	; 0x40c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

volatile int sample = 0;


int main(void)
{
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	00 d0       	rcall	.+0      	; 0x96 <main+0x6>
  96:	00 d0       	rcall	.+0      	; 0x98 <main+0x8>
  98:	00 d0       	rcall	.+0      	; 0x9a <main+0xa>
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
	cli();
  9e:	f8 94       	cli
	i_o_init();
  a0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <i_o_init>
	device_init();
  a4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <device_init>
	sei();
  a8:	78 94       	sei
	
	int num = 0;
	long int sum = 0;
	volatile int samples = 40;
  aa:	88 e2       	ldi	r24, 0x28	; 40
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	9a 83       	std	Y+2, r25	; 0x02
  b0:	89 83       	std	Y+1, r24	; 0x01
	volatile double rms = 0;
  b2:	1b 82       	std	Y+3, r1	; 0x03
  b4:	1c 82       	std	Y+4, r1	; 0x04
  b6:	1d 82       	std	Y+5, r1	; 0x05
  b8:	1e 82       	std	Y+6, r1	; 0x06
		
		if (samples == 0)
		{
			//PORTD |= (1 << INSTRUMENTATION_OUT);
			cli();
			rms = sqrt(sum/40);
  ba:	0f 2e       	mov	r0, r31
  bc:	f8 e2       	ldi	r31, 0x28	; 40
  be:	8f 2e       	mov	r8, r31
  c0:	91 2c       	mov	r9, r1
  c2:	a1 2c       	mov	r10, r1
  c4:	b1 2c       	mov	r11, r1
  c6:	f0 2d       	mov	r31, r0
			sum = 0;
			samples = 40;
  c8:	08 e2       	ldi	r16, 0x28	; 40
  ca:	10 e0       	ldi	r17, 0x00	; 0

volatile int sample = 0;


int main(void)
{
  cc:	c1 2c       	mov	r12, r1
  ce:	d1 2c       	mov	r13, r1
  d0:	76 01       	movw	r14, r12
	long int sum = 0;
	volatile int samples = 40;
	volatile double rms = 0;
	while (1)
	{
		if (sample == 1)
  d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  d6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	e9 f4       	brne	.+58     	; 0x118 <main+0x88>
		{
			PORTD |= (1 << INSTRUMENTATION_OUT);
  de:	5e 9a       	sbi	0x0b, 6	; 11
			sample = 0;
  e0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  e4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			num = ADC_get_conversion(0);
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <ADC_get_conversion>
			sum += (num * num);
  ee:	9c 01       	movw	r18, r24
  f0:	22 9f       	mul	r18, r18
  f2:	c0 01       	movw	r24, r0
  f4:	23 9f       	mul	r18, r19
  f6:	90 0d       	add	r25, r0
  f8:	90 0d       	add	r25, r0
  fa:	11 24       	eor	r1, r1
  fc:	09 2e       	mov	r0, r25
  fe:	00 0c       	add	r0, r0
 100:	aa 0b       	sbc	r26, r26
 102:	bb 0b       	sbc	r27, r27
 104:	c8 0e       	add	r12, r24
 106:	d9 1e       	adc	r13, r25
 108:	ea 1e       	adc	r14, r26
 10a:	fb 1e       	adc	r15, r27
			samples -= 1;
 10c:	89 81       	ldd	r24, Y+1	; 0x01
 10e:	9a 81       	ldd	r25, Y+2	; 0x02
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	9a 83       	std	Y+2, r25	; 0x02
 114:	89 83       	std	Y+1, r24	; 0x01
			PORTD &= ~(1 << INSTRUMENTATION_OUT);
 116:	5e 98       	cbi	0x0b, 6	; 11
		}
		
		
		if (samples == 0)
 118:	89 81       	ldd	r24, Y+1	; 0x01
 11a:	9a 81       	ldd	r25, Y+2	; 0x02
 11c:	89 2b       	or	r24, r25
 11e:	c9 f6       	brne	.-78     	; 0xd2 <main+0x42>
		{
			//PORTD |= (1 << INSTRUMENTATION_OUT);
			cli();
 120:	f8 94       	cli
			rms = sqrt(sum/40);
 122:	c7 01       	movw	r24, r14
 124:	b6 01       	movw	r22, r12
 126:	a5 01       	movw	r20, r10
 128:	94 01       	movw	r18, r8
 12a:	0e 94 c5 01 	call	0x38a	; 0x38a <__divmodsi4>
 12e:	69 01       	movw	r12, r18
 130:	7a 01       	movw	r14, r20
 132:	c7 01       	movw	r24, r14
 134:	b6 01       	movw	r22, r12
 136:	0e 94 0a 01 	call	0x214	; 0x214 <__floatsisf>
 13a:	0e 94 4b 01 	call	0x296	; 0x296 <sqrt>
 13e:	6b 83       	std	Y+3, r22	; 0x03
 140:	7c 83       	std	Y+4, r23	; 0x04
 142:	8d 83       	std	Y+5, r24	; 0x05
 144:	9e 83       	std	Y+6, r25	; 0x06
			sum = 0;
			samples = 40;
 146:	1a 83       	std	Y+2, r17	; 0x02
 148:	09 83       	std	Y+1, r16	; 0x01
			sei();
 14a:	78 94       	sei
 14c:	bf cf       	rjmp	.-130    	; 0xcc <main+0x3c>

0000014e <__vector_14>:
	}
	return 0;
}

ISR(TIMER0_COMPA_vect)
{
 14e:	1f 92       	push	r1
 150:	0f 92       	push	r0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	8f 93       	push	r24
 15a:	9f 93       	push	r25
	sample = 1;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 164:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	PORTD ^= (1 << ADC_CLK_OUT);
 168:	9b b1       	in	r25, 0x0b	; 11
 16a:	80 e2       	ldi	r24, 0x20	; 32
 16c:	89 27       	eor	r24, r25
 16e:	8b b9       	out	0x0b, r24	; 11
 170:	9f 91       	pop	r25
 172:	8f 91       	pop	r24
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <ADC_init>:
}

uint8_t ADC_is_conversion_done()
{
	return ((ADCSRA & (1 << ADIF)));
}
 17e:	80 e4       	ldi	r24, 0x40	; 64
 180:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 184:	ea e7       	ldi	r30, 0x7A	; 122
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	87 e8       	ldi	r24, 0x87	; 135
 18a:	80 83       	st	Z, r24
 18c:	80 81       	ld	r24, Z
 18e:	80 83       	st	Z, r24
 190:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
 194:	08 95       	ret

00000196 <ADC_clear_interrupt_flag>:
 196:	ea e7       	ldi	r30, 0x7A	; 122
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	80 61       	ori	r24, 0x10	; 16
 19e:	80 83       	st	Z, r24
 1a0:	08 95       	ret

000001a2 <ADC_start_conversion>:
 1a2:	ec e7       	ldi	r30, 0x7C	; 124
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	90 81       	ld	r25, Z
 1a8:	90 7f       	andi	r25, 0xF0	; 240
 1aa:	90 83       	st	Z, r25
 1ac:	90 81       	ld	r25, Z
 1ae:	89 2b       	or	r24, r25
 1b0:	80 83       	st	Z, r24
 1b2:	ea e7       	ldi	r30, 0x7A	; 122
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	80 64       	ori	r24, 0x40	; 64
 1ba:	80 83       	st	Z, r24
 1bc:	08 95       	ret

000001be <ADC_get_conversion_result>:

uint16_t ADC_get_conversion_result()
{
	ADC_clear_interrupt_flag();
 1be:	0e 94 cb 00 	call	0x196	; 0x196 <ADC_clear_interrupt_flag>
	return (ADCL | ADCH << 8);
 1c2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 1c6:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 1ca:	90 e0       	ldi	r25, 0x00	; 0
}
 1cc:	92 2b       	or	r25, r18
 1ce:	08 95       	ret

000001d0 <ADC_get_conversion>:

uint16_t ADC_get_conversion(uint8_t channel)
{
	ADC_start_conversion(channel);
 1d0:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <ADC_start_conversion>
	while(ADCSRA & (1<<ADSC));		// wait while conversion finishes
 1d4:	ea e7       	ldi	r30, 0x7A	; 122
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	86 fd       	sbrc	r24, 6
 1dc:	fd cf       	rjmp	.-6      	; 0x1d8 <ADC_get_conversion+0x8>
	return ADC_get_conversion_result();
 1de:	0e 94 df 00 	call	0x1be	; 0x1be <ADC_get_conversion_result>
 1e2:	08 95       	ret

000001e4 <device_init>:
#include "setup.h"


void device_init()
{
	timer_0_init();
 1e4:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <timer_0_init>
	ADC_init();
 1e8:	0e 94 bf 00 	call	0x17e	; 0x17e <ADC_init>
 1ec:	08 95       	ret

000001ee <i_o_init>:
}

void i_o_init()
{
	DDRD |= (1 << ADC_CLK_OUT);
 1ee:	55 9a       	sbi	0x0a, 5	; 10
	DDRD |= (1 << INSTRUMENTATION_OUT);
 1f0:	56 9a       	sbi	0x0a, 6	; 10
 1f2:	08 95       	ret

000001f4 <timer_0_init>:
 1f4:	84 b5       	in	r24, 0x24	; 36
 1f6:	82 60       	ori	r24, 0x02	; 2
 1f8:	84 bd       	out	0x24, r24	; 36
 1fa:	85 b5       	in	r24, 0x25	; 37
 1fc:	83 60       	ori	r24, 0x03	; 3
 1fe:	85 bd       	out	0x25, r24	; 37
 200:	87 e6       	ldi	r24, 0x67	; 103
 202:	87 bd       	out	0x27, r24	; 39
 204:	ee e6       	ldi	r30, 0x6E	; 110
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	82 60       	ori	r24, 0x02	; 2
 20c:	80 83       	st	Z, r24
 20e:	08 95       	ret

00000210 <__floatunsisf>:
 210:	e8 94       	clt
 212:	09 c0       	rjmp	.+18     	; 0x226 <__floatsisf+0x12>

00000214 <__floatsisf>:
 214:	97 fb       	bst	r25, 7
 216:	3e f4       	brtc	.+14     	; 0x226 <__floatsisf+0x12>
 218:	90 95       	com	r25
 21a:	80 95       	com	r24
 21c:	70 95       	com	r23
 21e:	61 95       	neg	r22
 220:	7f 4f       	sbci	r23, 0xFF	; 255
 222:	8f 4f       	sbci	r24, 0xFF	; 255
 224:	9f 4f       	sbci	r25, 0xFF	; 255
 226:	99 23       	and	r25, r25
 228:	a9 f0       	breq	.+42     	; 0x254 <__floatsisf+0x40>
 22a:	f9 2f       	mov	r31, r25
 22c:	96 e9       	ldi	r25, 0x96	; 150
 22e:	bb 27       	eor	r27, r27
 230:	93 95       	inc	r25
 232:	f6 95       	lsr	r31
 234:	87 95       	ror	r24
 236:	77 95       	ror	r23
 238:	67 95       	ror	r22
 23a:	b7 95       	ror	r27
 23c:	f1 11       	cpse	r31, r1
 23e:	f8 cf       	rjmp	.-16     	; 0x230 <__floatsisf+0x1c>
 240:	fa f4       	brpl	.+62     	; 0x280 <__floatsisf+0x6c>
 242:	bb 0f       	add	r27, r27
 244:	11 f4       	brne	.+4      	; 0x24a <__floatsisf+0x36>
 246:	60 ff       	sbrs	r22, 0
 248:	1b c0       	rjmp	.+54     	; 0x280 <__floatsisf+0x6c>
 24a:	6f 5f       	subi	r22, 0xFF	; 255
 24c:	7f 4f       	sbci	r23, 0xFF	; 255
 24e:	8f 4f       	sbci	r24, 0xFF	; 255
 250:	9f 4f       	sbci	r25, 0xFF	; 255
 252:	16 c0       	rjmp	.+44     	; 0x280 <__floatsisf+0x6c>
 254:	88 23       	and	r24, r24
 256:	11 f0       	breq	.+4      	; 0x25c <__floatsisf+0x48>
 258:	96 e9       	ldi	r25, 0x96	; 150
 25a:	11 c0       	rjmp	.+34     	; 0x27e <__floatsisf+0x6a>
 25c:	77 23       	and	r23, r23
 25e:	21 f0       	breq	.+8      	; 0x268 <__floatsisf+0x54>
 260:	9e e8       	ldi	r25, 0x8E	; 142
 262:	87 2f       	mov	r24, r23
 264:	76 2f       	mov	r23, r22
 266:	05 c0       	rjmp	.+10     	; 0x272 <__floatsisf+0x5e>
 268:	66 23       	and	r22, r22
 26a:	71 f0       	breq	.+28     	; 0x288 <__floatsisf+0x74>
 26c:	96 e8       	ldi	r25, 0x86	; 134
 26e:	86 2f       	mov	r24, r22
 270:	70 e0       	ldi	r23, 0x00	; 0
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	2a f0       	brmi	.+10     	; 0x280 <__floatsisf+0x6c>
 276:	9a 95       	dec	r25
 278:	66 0f       	add	r22, r22
 27a:	77 1f       	adc	r23, r23
 27c:	88 1f       	adc	r24, r24
 27e:	da f7       	brpl	.-10     	; 0x276 <__floatsisf+0x62>
 280:	88 0f       	add	r24, r24
 282:	96 95       	lsr	r25
 284:	87 95       	ror	r24
 286:	97 f9       	bld	r25, 7
 288:	08 95       	ret
 28a:	19 f4       	brne	.+6      	; 0x292 <__floatsisf+0x7e>
 28c:	16 f4       	brtc	.+4      	; 0x292 <__floatsisf+0x7e>
 28e:	0c 94 99 01 	jmp	0x332	; 0x332 <__fp_nan>
 292:	0c 94 8b 01 	jmp	0x316	; 0x316 <__fp_mpack>

00000296 <sqrt>:
 296:	0e 94 ab 01 	call	0x356	; 0x356 <__fp_splitA>
 29a:	b8 f3       	brcs	.-18     	; 0x28a <__floatsisf+0x76>
 29c:	99 23       	and	r25, r25
 29e:	c9 f3       	breq	.-14     	; 0x292 <__floatsisf+0x7e>
 2a0:	b6 f3       	brts	.-20     	; 0x28e <__floatsisf+0x7a>
 2a2:	9f 57       	subi	r25, 0x7F	; 127
 2a4:	55 0b       	sbc	r21, r21
 2a6:	87 ff       	sbrs	r24, 7
 2a8:	0e 94 9c 01 	call	0x338	; 0x338 <__fp_norm2>
 2ac:	00 24       	eor	r0, r0
 2ae:	a0 e6       	ldi	r26, 0x60	; 96
 2b0:	40 ea       	ldi	r20, 0xA0	; 160
 2b2:	90 01       	movw	r18, r0
 2b4:	80 58       	subi	r24, 0x80	; 128
 2b6:	56 95       	lsr	r21
 2b8:	97 95       	ror	r25
 2ba:	28 f4       	brcc	.+10     	; 0x2c6 <sqrt+0x30>
 2bc:	80 5c       	subi	r24, 0xC0	; 192
 2be:	66 0f       	add	r22, r22
 2c0:	77 1f       	adc	r23, r23
 2c2:	88 1f       	adc	r24, r24
 2c4:	20 f0       	brcs	.+8      	; 0x2ce <sqrt+0x38>
 2c6:	26 17       	cp	r18, r22
 2c8:	37 07       	cpc	r19, r23
 2ca:	48 07       	cpc	r20, r24
 2cc:	30 f4       	brcc	.+12     	; 0x2da <sqrt+0x44>
 2ce:	62 1b       	sub	r22, r18
 2d0:	73 0b       	sbc	r23, r19
 2d2:	84 0b       	sbc	r24, r20
 2d4:	20 29       	or	r18, r0
 2d6:	31 29       	or	r19, r1
 2d8:	4a 2b       	or	r20, r26
 2da:	a6 95       	lsr	r26
 2dc:	17 94       	ror	r1
 2de:	07 94       	ror	r0
 2e0:	20 25       	eor	r18, r0
 2e2:	31 25       	eor	r19, r1
 2e4:	4a 27       	eor	r20, r26
 2e6:	58 f7       	brcc	.-42     	; 0x2be <sqrt+0x28>
 2e8:	66 0f       	add	r22, r22
 2ea:	77 1f       	adc	r23, r23
 2ec:	88 1f       	adc	r24, r24
 2ee:	20 f0       	brcs	.+8      	; 0x2f8 <sqrt+0x62>
 2f0:	26 17       	cp	r18, r22
 2f2:	37 07       	cpc	r19, r23
 2f4:	48 07       	cpc	r20, r24
 2f6:	30 f4       	brcc	.+12     	; 0x304 <sqrt+0x6e>
 2f8:	62 0b       	sbc	r22, r18
 2fa:	73 0b       	sbc	r23, r19
 2fc:	84 0b       	sbc	r24, r20
 2fe:	20 0d       	add	r18, r0
 300:	31 1d       	adc	r19, r1
 302:	41 1d       	adc	r20, r1
 304:	a0 95       	com	r26
 306:	81 f7       	brne	.-32     	; 0x2e8 <sqrt+0x52>
 308:	b9 01       	movw	r22, r18
 30a:	84 2f       	mov	r24, r20
 30c:	91 58       	subi	r25, 0x81	; 129
 30e:	88 0f       	add	r24, r24
 310:	96 95       	lsr	r25
 312:	87 95       	ror	r24
 314:	08 95       	ret

00000316 <__fp_mpack>:
 316:	9f 3f       	cpi	r25, 0xFF	; 255
 318:	31 f0       	breq	.+12     	; 0x326 <__fp_mpack_finite+0xc>

0000031a <__fp_mpack_finite>:
 31a:	91 50       	subi	r25, 0x01	; 1
 31c:	20 f4       	brcc	.+8      	; 0x326 <__fp_mpack_finite+0xc>
 31e:	87 95       	ror	r24
 320:	77 95       	ror	r23
 322:	67 95       	ror	r22
 324:	b7 95       	ror	r27
 326:	88 0f       	add	r24, r24
 328:	91 1d       	adc	r25, r1
 32a:	96 95       	lsr	r25
 32c:	87 95       	ror	r24
 32e:	97 f9       	bld	r25, 7
 330:	08 95       	ret

00000332 <__fp_nan>:
 332:	9f ef       	ldi	r25, 0xFF	; 255
 334:	80 ec       	ldi	r24, 0xC0	; 192
 336:	08 95       	ret

00000338 <__fp_norm2>:
 338:	91 50       	subi	r25, 0x01	; 1
 33a:	50 40       	sbci	r21, 0x00	; 0
 33c:	66 0f       	add	r22, r22
 33e:	77 1f       	adc	r23, r23
 340:	88 1f       	adc	r24, r24
 342:	d2 f7       	brpl	.-12     	; 0x338 <__fp_norm2>
 344:	08 95       	ret

00000346 <__fp_split3>:
 346:	57 fd       	sbrc	r21, 7
 348:	90 58       	subi	r25, 0x80	; 128
 34a:	44 0f       	add	r20, r20
 34c:	55 1f       	adc	r21, r21
 34e:	59 f0       	breq	.+22     	; 0x366 <__fp_splitA+0x10>
 350:	5f 3f       	cpi	r21, 0xFF	; 255
 352:	71 f0       	breq	.+28     	; 0x370 <__fp_splitA+0x1a>
 354:	47 95       	ror	r20

00000356 <__fp_splitA>:
 356:	88 0f       	add	r24, r24
 358:	97 fb       	bst	r25, 7
 35a:	99 1f       	adc	r25, r25
 35c:	61 f0       	breq	.+24     	; 0x376 <__fp_splitA+0x20>
 35e:	9f 3f       	cpi	r25, 0xFF	; 255
 360:	79 f0       	breq	.+30     	; 0x380 <__fp_splitA+0x2a>
 362:	87 95       	ror	r24
 364:	08 95       	ret
 366:	12 16       	cp	r1, r18
 368:	13 06       	cpc	r1, r19
 36a:	14 06       	cpc	r1, r20
 36c:	55 1f       	adc	r21, r21
 36e:	f2 cf       	rjmp	.-28     	; 0x354 <__fp_split3+0xe>
 370:	46 95       	lsr	r20
 372:	f1 df       	rcall	.-30     	; 0x356 <__fp_splitA>
 374:	08 c0       	rjmp	.+16     	; 0x386 <__fp_splitA+0x30>
 376:	16 16       	cp	r1, r22
 378:	17 06       	cpc	r1, r23
 37a:	18 06       	cpc	r1, r24
 37c:	99 1f       	adc	r25, r25
 37e:	f1 cf       	rjmp	.-30     	; 0x362 <__fp_splitA+0xc>
 380:	86 95       	lsr	r24
 382:	71 05       	cpc	r23, r1
 384:	61 05       	cpc	r22, r1
 386:	08 94       	sec
 388:	08 95       	ret

0000038a <__divmodsi4>:
 38a:	05 2e       	mov	r0, r21
 38c:	97 fb       	bst	r25, 7
 38e:	1e f4       	brtc	.+6      	; 0x396 <__divmodsi4+0xc>
 390:	00 94       	com	r0
 392:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__negsi2>
 396:	57 fd       	sbrc	r21, 7
 398:	07 d0       	rcall	.+14     	; 0x3a8 <__divmodsi4_neg2>
 39a:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__udivmodsi4>
 39e:	07 fc       	sbrc	r0, 7
 3a0:	03 d0       	rcall	.+6      	; 0x3a8 <__divmodsi4_neg2>
 3a2:	4e f4       	brtc	.+18     	; 0x3b6 <__divmodsi4_exit>
 3a4:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__negsi2>

000003a8 <__divmodsi4_neg2>:
 3a8:	50 95       	com	r21
 3aa:	40 95       	com	r20
 3ac:	30 95       	com	r19
 3ae:	21 95       	neg	r18
 3b0:	3f 4f       	sbci	r19, 0xFF	; 255
 3b2:	4f 4f       	sbci	r20, 0xFF	; 255
 3b4:	5f 4f       	sbci	r21, 0xFF	; 255

000003b6 <__divmodsi4_exit>:
 3b6:	08 95       	ret

000003b8 <__negsi2>:
 3b8:	90 95       	com	r25
 3ba:	80 95       	com	r24
 3bc:	70 95       	com	r23
 3be:	61 95       	neg	r22
 3c0:	7f 4f       	sbci	r23, 0xFF	; 255
 3c2:	8f 4f       	sbci	r24, 0xFF	; 255
 3c4:	9f 4f       	sbci	r25, 0xFF	; 255
 3c6:	08 95       	ret

000003c8 <__udivmodsi4>:
 3c8:	a1 e2       	ldi	r26, 0x21	; 33
 3ca:	1a 2e       	mov	r1, r26
 3cc:	aa 1b       	sub	r26, r26
 3ce:	bb 1b       	sub	r27, r27
 3d0:	fd 01       	movw	r30, r26
 3d2:	0d c0       	rjmp	.+26     	; 0x3ee <__udivmodsi4_ep>

000003d4 <__udivmodsi4_loop>:
 3d4:	aa 1f       	adc	r26, r26
 3d6:	bb 1f       	adc	r27, r27
 3d8:	ee 1f       	adc	r30, r30
 3da:	ff 1f       	adc	r31, r31
 3dc:	a2 17       	cp	r26, r18
 3de:	b3 07       	cpc	r27, r19
 3e0:	e4 07       	cpc	r30, r20
 3e2:	f5 07       	cpc	r31, r21
 3e4:	20 f0       	brcs	.+8      	; 0x3ee <__udivmodsi4_ep>
 3e6:	a2 1b       	sub	r26, r18
 3e8:	b3 0b       	sbc	r27, r19
 3ea:	e4 0b       	sbc	r30, r20
 3ec:	f5 0b       	sbc	r31, r21

000003ee <__udivmodsi4_ep>:
 3ee:	66 1f       	adc	r22, r22
 3f0:	77 1f       	adc	r23, r23
 3f2:	88 1f       	adc	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	1a 94       	dec	r1
 3f8:	69 f7       	brne	.-38     	; 0x3d4 <__udivmodsi4_loop>
 3fa:	60 95       	com	r22
 3fc:	70 95       	com	r23
 3fe:	80 95       	com	r24
 400:	90 95       	com	r25
 402:	9b 01       	movw	r18, r22
 404:	ac 01       	movw	r20, r24
 406:	bd 01       	movw	r22, r26
 408:	cf 01       	movw	r24, r30
 40a:	08 95       	ret

0000040c <_exit>:
 40c:	f8 94       	cli

0000040e <__stop_program>:
 40e:	ff cf       	rjmp	.-2      	; 0x40e <__stop_program>

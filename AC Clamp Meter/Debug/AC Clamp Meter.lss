
AC Clamp Meter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000794  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000720  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000794  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d4b  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000096c  00000000  00000000  000016a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ae  00000000  00000000  00002013  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000260  00000000  00000000  000028c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005fb  00000000  00000000  00002b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002eb  00000000  00000000  0000311f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  0000340a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 03 01 	jmp	0x206	; 0x206 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5d 00 	call	0xba	; 0xba <main>
  88:	0c 94 8e 03 	jmp	0x71c	; 0x71c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <shift_out>:
		USART_0_write((data >> (byte*8)) & 0xff);
	}
}

void shift_out(uint16_t data)
{
  90:	20 e0       	ldi	r18, 0x00	; 0
  92:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t next_bit = 0;
	
	for (bit = 0; bit < 10; bit++) {
		next_bit = (data >> bit) & 0x01;
		
		if (next_bit) {
  94:	ac 01       	movw	r20, r24
  96:	02 2e       	mov	r0, r18
  98:	02 c0       	rjmp	.+4      	; 0x9e <shift_out+0xe>
  9a:	56 95       	lsr	r21
  9c:	47 95       	ror	r20
  9e:	0a 94       	dec	r0
  a0:	e2 f7       	brpl	.-8      	; 0x9a <shift_out+0xa>
  a2:	40 ff       	sbrs	r20, 0
  a4:	02 c0       	rjmp	.+4      	; 0xaa <shift_out+0x1a>
			PORTD |= (1 << DISPLAY);
  a6:	5f 9a       	sbi	0x0b, 7	; 11
  a8:	01 c0       	rjmp	.+2      	; 0xac <shift_out+0x1c>
		} else {
			PORTD &= ~(1 << DISPLAY);
  aa:	5f 98       	cbi	0x0b, 7	; 11
  ac:	2f 5f       	subi	r18, 0xFF	; 255
  ae:	3f 4f       	sbci	r19, 0xFF	; 255
void shift_out(uint16_t data)
{
	uint8_t bit = 0;
	uint8_t next_bit = 0;
	
	for (bit = 0; bit < 10; bit++) {
  b0:	2a 30       	cpi	r18, 0x0A	; 10
  b2:	31 05       	cpc	r19, r1
  b4:	79 f7       	brne	.-34     	; 0x94 <shift_out+0x4>
			PORTD |= (1 << DISPLAY);
		} else {
			PORTD &= ~(1 << DISPLAY);
		}
	}
	PORTD &= ~(1 << DISPLAY);
  b6:	5f 98       	cbi	0x0b, 7	; 11
  b8:	08 95       	ret

000000ba <main>:
uint8_t adc_channel = 0;
volatile uint8_t mode = 0;
volatile uint16_t timer_ticks = 0;

int main(void)
{
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	00 d0       	rcall	.+0      	; 0xc0 <main+0x6>
  c0:	00 d0       	rcall	.+0      	; 0xc2 <main+0x8>
  c2:	1f 92       	push	r1
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
	i_o_init();
  c8:	0e 94 56 01 	call	0x2ac	; 0x2ac <i_o_init>
	device_init();
  cc:	0e 94 4f 01 	call	0x29e	; 0x29e <device_init>
	sei();
  d0:	78 94       	sei
	
	uint16_t v_in = 0;
	uint_fast32_t sum = 0;
	volatile uint8_t samples = 40;
  d2:	88 e2       	ldi	r24, 0x28	; 40
  d4:	89 83       	std	Y+1, r24	; 0x01
	volatile uint_fast32_t rms = 0;
  d6:	1a 82       	std	Y+2, r1	; 0x02
  d8:	1b 82       	std	Y+3, r1	; 0x03
  da:	1c 82       	std	Y+4, r1	; 0x04
  dc:	1d 82       	std	Y+5, r1	; 0x05
	//uint8_t display_updates_per_second = 4;
	uint16_t display_update_interval = 600;
	uint16_t timer_ticks_to_display_update = 600; //magic number for now. 600 * 416 us = 0.25 s
	
	
	mode = MODE_IDLE;
  de:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <mode>
	ADC_0_select_channel(adc_channel);
  e2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <adc_channel>
  e6:	0e 94 3e 01 	call	0x27c	; 0x27c <ADC_0_select_channel>
	uint_fast32_t sum = 0;
	volatile uint8_t samples = 40;
	volatile uint_fast32_t rms = 0;
	//uint8_t display_updates_per_second = 4;
	uint16_t display_update_interval = 600;
	uint16_t timer_ticks_to_display_update = 600; //magic number for now. 600 * 416 us = 0.25 s
  ea:	0f 2e       	mov	r0, r31
  ec:	f8 e5       	ldi	r31, 0x58	; 88
  ee:	cf 2e       	mov	r12, r31
  f0:	f2 e0       	ldi	r31, 0x02	; 2
  f2:	df 2e       	mov	r13, r31
  f4:	f0 2d       	mov	r31, r0
	i_o_init();
	device_init();
	sei();
	
	uint16_t v_in = 0;
	uint_fast32_t sum = 0;
  f6:	e1 2c       	mov	r14, r1
  f8:	f1 2c       	mov	r15, r1
  fa:	00 e0       	ldi	r16, 0x00	; 0
  fc:	10 e0       	ldi	r17, 0x00	; 0
			case MODE_CALCULATE:
				PORTD |= (1 << INSTRUMENTATION_OUT);
				rms = sum/40;
				rms = sqrt(rms);
				sum = 0;
				samples = 40;
  fe:	0f 2e       	mov	r0, r31
 100:	f8 e2       	ldi	r31, 0x28	; 40
 102:	7f 2e       	mov	r7, r31
 104:	f0 2d       	mov	r31, r0
			/************************************************************************/	
			case MODE_CALCULATE:
				PORTD |= (1 << INSTRUMENTATION_OUT);
				rms = sum/40;
				rms = sqrt(rms);
				sum = 0;
 106:	41 2c       	mov	r4, r1
 108:	31 2c       	mov	r3, r1
 10a:	21 2c       	mov	r2, r1
 10c:	61 2c       	mov	r6, r1
				samples = 40;
				
				if (timer_ticks > timer_ticks_to_display_update) {
					mode = MODE_DISPLAY;
 10e:	0f 2e       	mov	r0, r31
 110:	f3 e0       	ldi	r31, 0x03	; 3
 112:	5f 2e       	mov	r5, r31
 114:	f0 2d       	mov	r31, r0
	mode = MODE_IDLE;
	ADC_0_select_channel(adc_channel);
	
	while (1)
	{
		switch(mode)
 116:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mode>
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	39 f0       	breq	.+14     	; 0x12c <main+0x72>
 11e:	d8 f3       	brcs	.-10     	; 0x116 <main+0x5c>
 120:	82 30       	cpi	r24, 0x02	; 2
 122:	81 f1       	breq	.+96     	; 0x184 <main+0xca>
 124:	83 30       	cpi	r24, 0x03	; 3
 126:	09 f4       	brne	.+2      	; 0x12a <main+0x70>
 128:	5f c0       	rjmp	.+190    	; 0x1e8 <main+0x12e>
 12a:	6b c0       	rjmp	.+214    	; 0x202 <main+0x148>
			/* Performs first part of RMS calculation: sum(x^2)						*/
			/* Decrementing counter keeps track how many samples remain             */
			/************************************************************************/
			case MODE_MEASURE:
				//PORTD |= (1 << INSTRUMENTATION_OUT);
				v_in = ADC_0_get_conversion_result();
 12c:	0e 94 46 01 	call	0x28c	; 0x28c <ADC_0_get_conversion_result>
				sum += pow(v_in, 2);
 130:	bc 01       	movw	r22, r24
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 16 02 	call	0x42c	; 0x42c <__floatunsisf>
 13a:	9b 01       	movw	r18, r22
 13c:	ac 01       	movw	r20, r24
 13e:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
 142:	4b 01       	movw	r8, r22
 144:	5c 01       	movw	r10, r24
 146:	6e 2d       	mov	r22, r14
 148:	7f 2d       	mov	r23, r15
 14a:	80 2f       	mov	r24, r16
 14c:	91 2f       	mov	r25, r17
 14e:	0e 94 16 02 	call	0x42c	; 0x42c <__floatunsisf>
 152:	9b 01       	movw	r18, r22
 154:	ac 01       	movw	r20, r24
 156:	c5 01       	movw	r24, r10
 158:	b4 01       	movw	r22, r8
 15a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <__addsf3>
 15e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <__fixunssfsi>
 162:	e6 2e       	mov	r14, r22
 164:	f7 2e       	mov	r15, r23
 166:	08 2f       	mov	r16, r24
 168:	19 2f       	mov	r17, r25
				samples -= 1;
 16a:	89 81       	ldd	r24, Y+1	; 0x01
 16c:	81 50       	subi	r24, 0x01	; 1
 16e:	89 83       	std	Y+1, r24	; 0x01
				if(samples == 0) {
 170:	89 81       	ldd	r24, Y+1	; 0x01
 172:	81 11       	cpse	r24, r1
 174:	04 c0       	rjmp	.+8      	; 0x17e <main+0xc4>
					mode = MODE_CALCULATE;
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <mode>
 17c:	cc cf       	rjmp	.-104    	; 0x116 <main+0x5c>
				} else {
					mode = MODE_IDLE;
 17e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <mode>
 182:	c9 cf       	rjmp	.-110    	; 0x116 <main+0x5c>
			/************************************************************************/
			/* This case is executed when all required samples have been taken.     */  
			/* Performs second part of RMS calculation: sqrt(sum/n)                 */                                                  
			/************************************************************************/	
			case MODE_CALCULATE:
				PORTD |= (1 << INSTRUMENTATION_OUT);
 184:	5e 9a       	sbi	0x0b, 6	; 11
				rms = sum/40;
 186:	6e 2d       	mov	r22, r14
 188:	7f 2d       	mov	r23, r15
 18a:	80 2f       	mov	r24, r16
 18c:	91 2f       	mov	r25, r17
 18e:	28 e2       	ldi	r18, 0x28	; 40
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	40 e0       	ldi	r20, 0x00	; 0
 194:	50 e0       	ldi	r21, 0x00	; 0
 196:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__udivmodsi4>
 19a:	2a 83       	std	Y+2, r18	; 0x02
 19c:	3b 83       	std	Y+3, r19	; 0x03
 19e:	4c 83       	std	Y+4, r20	; 0x04
 1a0:	5d 83       	std	Y+5, r21	; 0x05
				rms = sqrt(rms);
 1a2:	8a 80       	ldd	r8, Y+2	; 0x02
 1a4:	9b 80       	ldd	r9, Y+3	; 0x03
 1a6:	ac 80       	ldd	r10, Y+4	; 0x04
 1a8:	bd 80       	ldd	r11, Y+5	; 0x05
 1aa:	c5 01       	movw	r24, r10
 1ac:	b4 01       	movw	r22, r8
 1ae:	0e 94 16 02 	call	0x42c	; 0x42c <__floatunsisf>
 1b2:	0e 94 17 03 	call	0x62e	; 0x62e <sqrt>
 1b6:	0e 94 e7 01 	call	0x3ce	; 0x3ce <__fixunssfsi>
 1ba:	6a 83       	std	Y+2, r22	; 0x02
 1bc:	7b 83       	std	Y+3, r23	; 0x03
 1be:	8c 83       	std	Y+4, r24	; 0x04
 1c0:	9d 83       	std	Y+5, r25	; 0x05
				sum = 0;
				samples = 40;
 1c2:	79 82       	std	Y+1, r7	; 0x01
				
				if (timer_ticks > timer_ticks_to_display_update) {
 1c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1c8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1cc:	c8 16       	cp	r12, r24
 1ce:	d9 06       	cpc	r13, r25
 1d0:	18 f4       	brcc	.+6      	; 0x1d8 <main+0x11e>
					mode = MODE_DISPLAY;
 1d2:	50 92 02 01 	sts	0x0102, r5	; 0x800102 <mode>
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <main+0x122>
				} else {
					mode = MODE_IDLE;
 1d8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <mode>
				}
				PORTD &= ~(1 << INSTRUMENTATION_OUT);
 1dc:	5e 98       	cbi	0x0b, 6	; 11
			/************************************************************************/	
			case MODE_CALCULATE:
				PORTD |= (1 << INSTRUMENTATION_OUT);
				rms = sum/40;
				rms = sqrt(rms);
				sum = 0;
 1de:	e4 2c       	mov	r14, r4
 1e0:	f3 2c       	mov	r15, r3
 1e2:	02 2d       	mov	r16, r2
 1e4:	16 2d       	mov	r17, r6
					mode = MODE_DISPLAY;
				} else {
					mode = MODE_IDLE;
				}
				PORTD &= ~(1 << INSTRUMENTATION_OUT);
				break;
 1e6:	97 cf       	rjmp	.-210    	; 0x116 <main+0x5c>
				
			case MODE_DISPLAY:
				timer_ticks_to_display_update += display_update_interval;
 1e8:	88 ea       	ldi	r24, 0xA8	; 168
 1ea:	c8 1a       	sub	r12, r24
 1ec:	8d ef       	ldi	r24, 0xFD	; 253
 1ee:	d8 0a       	sbc	r13, r24
				//send_two_bytes(rms);
				shift_out(rms);
 1f0:	8a 81       	ldd	r24, Y+2	; 0x02
 1f2:	9b 81       	ldd	r25, Y+3	; 0x03
 1f4:	ac 81       	ldd	r26, Y+4	; 0x04
 1f6:	bd 81       	ldd	r27, Y+5	; 0x05
 1f8:	0e 94 48 00 	call	0x90	; 0x90 <shift_out>
				mode = MODE_IDLE;
 1fc:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <mode>
				break;
 200:	8a cf       	rjmp	.-236    	; 0x116 <main+0x5c>
			case MODE_IDLE:
				;
				break;
				
			default:
				PORTD |= (1 << ERROR);
 202:	5c 9a       	sbi	0x0b, 4	; 11
 204:	88 cf       	rjmp	.-240    	; 0x116 <main+0x5c>

00000206 <__vector_14>:
	}
	PORTD &= ~(1 << DISPLAY);
}

ISR(TIMER0_COMPA_vect)
{
 206:	1f 92       	push	r1
 208:	0f 92       	push	r0
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	0f 92       	push	r0
 20e:	11 24       	eor	r1, r1
 210:	8f 93       	push	r24
 212:	9f 93       	push	r25
	timer_ticks += 1;
 214:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 218:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 21c:	01 96       	adiw	r24, 0x01	; 1
 21e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 222:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	PORTD ^= (1 << ADC_CLK_OUT);
 226:	9b b1       	in	r25, 0x0b	; 11
 228:	80 e2       	ldi	r24, 0x20	; 32
 22a:	89 27       	eor	r24, r25
 22c:	8b b9       	out	0x0b, r24	; 11
}
 22e:	9f 91       	pop	r25
 230:	8f 91       	pop	r24
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <__vector_21>:

ISR(ADC_vect)
{
 23c:	1f 92       	push	r1
 23e:	0f 92       	push	r0
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	0f 92       	push	r0
 244:	11 24       	eor	r1, r1
 246:	8f 93       	push	r24
	mode = MODE_MEASURE;
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <mode>
 24e:	8f 91       	pop	r24
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <ADC_0_init>:
}

uint8_t ADC_0_is_conversion_done()
{
	return ((ADCSRA & (1 << ADIF)));
}
 25a:	80 e4       	ldi	r24, 0x40	; 64
 25c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 260:	8f ea       	ldi	r24, 0xAF	; 175
 262:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 266:	83 e0       	ldi	r24, 0x03	; 3
 268:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	08 95       	ret

00000270 <ADC_0_clear_interrupt_flag>:
 270:	ea e7       	ldi	r30, 0x7A	; 122
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	80 61       	ori	r24, 0x10	; 16
 278:	80 83       	st	Z, r24
 27a:	08 95       	ret

0000027c <ADC_0_select_channel>:
 27c:	ec e7       	ldi	r30, 0x7C	; 124
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	90 81       	ld	r25, Z
 282:	90 7f       	andi	r25, 0xF0	; 240
 284:	8f 70       	andi	r24, 0x0F	; 15
 286:	89 2b       	or	r24, r25
 288:	80 83       	st	Z, r24
 28a:	08 95       	ret

0000028c <ADC_0_get_conversion_result>:

uint16_t ADC_0_get_conversion_result()
{
	ADC_0_clear_interrupt_flag();
 28c:	0e 94 38 01 	call	0x270	; 0x270 <ADC_0_clear_interrupt_flag>
	return (ADCL | ADCH << 8);
 290:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 294:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 298:	90 e0       	ldi	r25, 0x00	; 0
}
 29a:	92 2b       	or	r25, r18
 29c:	08 95       	ret

0000029e <device_init>:

#include <setup.h>

void device_init()
{
	TIMER_0_init();
 29e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <TIMER_0_init>
	ADC_0_init();
 2a2:	0e 94 2d 01 	call	0x25a	; 0x25a <ADC_0_init>
	USART_0_init();
 2a6:	0e 94 69 01 	call	0x2d2	; 0x2d2 <USART_0_init>
 2aa:	08 95       	ret

000002ac <i_o_init>:
}

void i_o_init()
{
	DDRD |= (1 << ADC_CLK_OUT);
 2ac:	55 9a       	sbi	0x0a, 5	; 10
	DDRD |= (1 << INSTRUMENTATION_OUT);
 2ae:	56 9a       	sbi	0x0a, 6	; 10
	DDRD |= (1 << ERROR);
 2b0:	54 9a       	sbi	0x0a, 4	; 10
	DDRD |= (1 << DISPLAY);
 2b2:	57 9a       	sbi	0x0a, 7	; 10
 2b4:	08 95       	ret

000002b6 <TIMER_0_init>:
 */ 
#include <TC_0.h>

void TIMER_0_init(void)
{
	TCCR0A |= (1 << WGM01); // Mode 2, Clear on Timer Compare
 2b6:	84 b5       	in	r24, 0x24	; 36
 2b8:	82 60       	ori	r24, 0x02	; 2
 2ba:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01) | (1 << CS00); // Prescaler set to clk/64
 2bc:	85 b5       	in	r24, 0x25	; 37
 2be:	83 60       	ori	r24, 0x03	; 3
 2c0:	85 bd       	out	0x25, r24	; 37
	OCR0A = 103; // 2400 Hz
 2c2:	87 e6       	ldi	r24, 0x67	; 103
 2c4:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);	// Compare A Match Interrupt Enable
 2c6:	ee e6       	ldi	r30, 0x6E	; 110
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
 2cc:	82 60       	ori	r24, 0x02	; 2
 2ce:	80 83       	st	Z, r24
 2d0:	08 95       	ret

000002d2 <USART_0_init>:
	
	#define BAUD 9600
	#include <util/setbaud.h>
	
	/* Enable USART0 */
	PRR &= ~(1 << PRUSART0);
 2d2:	e4 e6       	ldi	r30, 0x64	; 100
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	8d 7f       	andi	r24, 0xFD	; 253
 2da:	80 83       	st	Z, r24
	
	UBRR0H = UBRRH_VALUE;
 2dc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
 2e0:	87 e6       	ldi	r24, 0x67	; 103
 2e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	UCSR0A = USE_2X << U2X0 /*  */
 2e6:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
			| (0 << MPCM0);  /* Multi-processor Communication Mode: disabled */

	UCSR0B =  (1 << RXCIE0)    /* RX Complete Interrupt Enable: enabled */
 2ea:	88 e9       	ldi	r24, 0x98	; 152
 2ec:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	//		 | (0 << UPM01) | (0 << UPM00) /* Disabled */
	//		 | 0 << USBS0 /* USART Stop Bit Select: disabled */
	//		 | (1 << UCSZ01) | (1 << UCSZ00); /* 8-bit */

	return 0;
}
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	08 95       	ret

000002f4 <__subsf3>:
 2f4:	50 58       	subi	r21, 0x80	; 128

000002f6 <__addsf3>:
 2f6:	bb 27       	eor	r27, r27
 2f8:	aa 27       	eor	r26, r26
 2fa:	0e 94 92 01 	call	0x324	; 0x324 <__addsf3x>
 2fe:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__fp_round>
 302:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <__fp_pscA>
 306:	38 f0       	brcs	.+14     	; 0x316 <__addsf3+0x20>
 308:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__fp_pscB>
 30c:	20 f0       	brcs	.+8      	; 0x316 <__addsf3+0x20>
 30e:	39 f4       	brne	.+14     	; 0x31e <__addsf3+0x28>
 310:	9f 3f       	cpi	r25, 0xFF	; 255
 312:	19 f4       	brne	.+6      	; 0x31a <__addsf3+0x24>
 314:	26 f4       	brtc	.+8      	; 0x31e <__addsf3+0x28>
 316:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__fp_nan>
 31a:	0e f4       	brtc	.+2      	; 0x31e <__addsf3+0x28>
 31c:	e0 95       	com	r30
 31e:	e7 fb       	bst	r30, 7
 320:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <__fp_inf>

00000324 <__addsf3x>:
 324:	e9 2f       	mov	r30, r25
 326:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__fp_split3>
 32a:	58 f3       	brcs	.-42     	; 0x302 <__addsf3+0xc>
 32c:	ba 17       	cp	r27, r26
 32e:	62 07       	cpc	r22, r18
 330:	73 07       	cpc	r23, r19
 332:	84 07       	cpc	r24, r20
 334:	95 07       	cpc	r25, r21
 336:	20 f0       	brcs	.+8      	; 0x340 <__addsf3x+0x1c>
 338:	79 f4       	brne	.+30     	; 0x358 <__addsf3x+0x34>
 33a:	a6 f5       	brtc	.+104    	; 0x3a4 <__addsf3x+0x80>
 33c:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__fp_zero>
 340:	0e f4       	brtc	.+2      	; 0x344 <__addsf3x+0x20>
 342:	e0 95       	com	r30
 344:	0b 2e       	mov	r0, r27
 346:	ba 2f       	mov	r27, r26
 348:	a0 2d       	mov	r26, r0
 34a:	0b 01       	movw	r0, r22
 34c:	b9 01       	movw	r22, r18
 34e:	90 01       	movw	r18, r0
 350:	0c 01       	movw	r0, r24
 352:	ca 01       	movw	r24, r20
 354:	a0 01       	movw	r20, r0
 356:	11 24       	eor	r1, r1
 358:	ff 27       	eor	r31, r31
 35a:	59 1b       	sub	r21, r25
 35c:	99 f0       	breq	.+38     	; 0x384 <__addsf3x+0x60>
 35e:	59 3f       	cpi	r21, 0xF9	; 249
 360:	50 f4       	brcc	.+20     	; 0x376 <__addsf3x+0x52>
 362:	50 3e       	cpi	r21, 0xE0	; 224
 364:	68 f1       	brcs	.+90     	; 0x3c0 <__addsf3x+0x9c>
 366:	1a 16       	cp	r1, r26
 368:	f0 40       	sbci	r31, 0x00	; 0
 36a:	a2 2f       	mov	r26, r18
 36c:	23 2f       	mov	r18, r19
 36e:	34 2f       	mov	r19, r20
 370:	44 27       	eor	r20, r20
 372:	58 5f       	subi	r21, 0xF8	; 248
 374:	f3 cf       	rjmp	.-26     	; 0x35c <__addsf3x+0x38>
 376:	46 95       	lsr	r20
 378:	37 95       	ror	r19
 37a:	27 95       	ror	r18
 37c:	a7 95       	ror	r26
 37e:	f0 40       	sbci	r31, 0x00	; 0
 380:	53 95       	inc	r21
 382:	c9 f7       	brne	.-14     	; 0x376 <__addsf3x+0x52>
 384:	7e f4       	brtc	.+30     	; 0x3a4 <__addsf3x+0x80>
 386:	1f 16       	cp	r1, r31
 388:	ba 0b       	sbc	r27, r26
 38a:	62 0b       	sbc	r22, r18
 38c:	73 0b       	sbc	r23, r19
 38e:	84 0b       	sbc	r24, r20
 390:	ba f0       	brmi	.+46     	; 0x3c0 <__addsf3x+0x9c>
 392:	91 50       	subi	r25, 0x01	; 1
 394:	a1 f0       	breq	.+40     	; 0x3be <__addsf3x+0x9a>
 396:	ff 0f       	add	r31, r31
 398:	bb 1f       	adc	r27, r27
 39a:	66 1f       	adc	r22, r22
 39c:	77 1f       	adc	r23, r23
 39e:	88 1f       	adc	r24, r24
 3a0:	c2 f7       	brpl	.-16     	; 0x392 <__addsf3x+0x6e>
 3a2:	0e c0       	rjmp	.+28     	; 0x3c0 <__addsf3x+0x9c>
 3a4:	ba 0f       	add	r27, r26
 3a6:	62 1f       	adc	r22, r18
 3a8:	73 1f       	adc	r23, r19
 3aa:	84 1f       	adc	r24, r20
 3ac:	48 f4       	brcc	.+18     	; 0x3c0 <__addsf3x+0x9c>
 3ae:	87 95       	ror	r24
 3b0:	77 95       	ror	r23
 3b2:	67 95       	ror	r22
 3b4:	b7 95       	ror	r27
 3b6:	f7 95       	ror	r31
 3b8:	9e 3f       	cpi	r25, 0xFE	; 254
 3ba:	08 f0       	brcs	.+2      	; 0x3be <__addsf3x+0x9a>
 3bc:	b0 cf       	rjmp	.-160    	; 0x31e <__addsf3+0x28>
 3be:	93 95       	inc	r25
 3c0:	88 0f       	add	r24, r24
 3c2:	08 f0       	brcs	.+2      	; 0x3c6 <__addsf3x+0xa2>
 3c4:	99 27       	eor	r25, r25
 3c6:	ee 0f       	add	r30, r30
 3c8:	97 95       	ror	r25
 3ca:	87 95       	ror	r24
 3cc:	08 95       	ret

000003ce <__fixunssfsi>:
 3ce:	0e 94 83 02 	call	0x506	; 0x506 <__fp_splitA>
 3d2:	88 f0       	brcs	.+34     	; 0x3f6 <__fixunssfsi+0x28>
 3d4:	9f 57       	subi	r25, 0x7F	; 127
 3d6:	98 f0       	brcs	.+38     	; 0x3fe <__fixunssfsi+0x30>
 3d8:	b9 2f       	mov	r27, r25
 3da:	99 27       	eor	r25, r25
 3dc:	b7 51       	subi	r27, 0x17	; 23
 3de:	b0 f0       	brcs	.+44     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3e0:	e1 f0       	breq	.+56     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 3e2:	66 0f       	add	r22, r22
 3e4:	77 1f       	adc	r23, r23
 3e6:	88 1f       	adc	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	1a f0       	brmi	.+6      	; 0x3f2 <__fixunssfsi+0x24>
 3ec:	ba 95       	dec	r27
 3ee:	c9 f7       	brne	.-14     	; 0x3e2 <__fixunssfsi+0x14>
 3f0:	14 c0       	rjmp	.+40     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 3f2:	b1 30       	cpi	r27, 0x01	; 1
 3f4:	91 f0       	breq	.+36     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 3f6:	0e 94 9d 02 	call	0x53a	; 0x53a <__fp_zero>
 3fa:	b1 e0       	ldi	r27, 0x01	; 1
 3fc:	08 95       	ret
 3fe:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__fp_zero>
 402:	67 2f       	mov	r22, r23
 404:	78 2f       	mov	r23, r24
 406:	88 27       	eor	r24, r24
 408:	b8 5f       	subi	r27, 0xF8	; 248
 40a:	39 f0       	breq	.+14     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 40c:	b9 3f       	cpi	r27, 0xF9	; 249
 40e:	cc f3       	brlt	.-14     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 410:	86 95       	lsr	r24
 412:	77 95       	ror	r23
 414:	67 95       	ror	r22
 416:	b3 95       	inc	r27
 418:	d9 f7       	brne	.-10     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 41a:	3e f4       	brtc	.+14     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 41c:	90 95       	com	r25
 41e:	80 95       	com	r24
 420:	70 95       	com	r23
 422:	61 95       	neg	r22
 424:	7f 4f       	sbci	r23, 0xFF	; 255
 426:	8f 4f       	sbci	r24, 0xFF	; 255
 428:	9f 4f       	sbci	r25, 0xFF	; 255
 42a:	08 95       	ret

0000042c <__floatunsisf>:
 42c:	e8 94       	clt
 42e:	09 c0       	rjmp	.+18     	; 0x442 <__floatsisf+0x12>

00000430 <__floatsisf>:
 430:	97 fb       	bst	r25, 7
 432:	3e f4       	brtc	.+14     	; 0x442 <__floatsisf+0x12>
 434:	90 95       	com	r25
 436:	80 95       	com	r24
 438:	70 95       	com	r23
 43a:	61 95       	neg	r22
 43c:	7f 4f       	sbci	r23, 0xFF	; 255
 43e:	8f 4f       	sbci	r24, 0xFF	; 255
 440:	9f 4f       	sbci	r25, 0xFF	; 255
 442:	99 23       	and	r25, r25
 444:	a9 f0       	breq	.+42     	; 0x470 <__floatsisf+0x40>
 446:	f9 2f       	mov	r31, r25
 448:	96 e9       	ldi	r25, 0x96	; 150
 44a:	bb 27       	eor	r27, r27
 44c:	93 95       	inc	r25
 44e:	f6 95       	lsr	r31
 450:	87 95       	ror	r24
 452:	77 95       	ror	r23
 454:	67 95       	ror	r22
 456:	b7 95       	ror	r27
 458:	f1 11       	cpse	r31, r1
 45a:	f8 cf       	rjmp	.-16     	; 0x44c <__floatsisf+0x1c>
 45c:	fa f4       	brpl	.+62     	; 0x49c <__floatsisf+0x6c>
 45e:	bb 0f       	add	r27, r27
 460:	11 f4       	brne	.+4      	; 0x466 <__floatsisf+0x36>
 462:	60 ff       	sbrs	r22, 0
 464:	1b c0       	rjmp	.+54     	; 0x49c <__floatsisf+0x6c>
 466:	6f 5f       	subi	r22, 0xFF	; 255
 468:	7f 4f       	sbci	r23, 0xFF	; 255
 46a:	8f 4f       	sbci	r24, 0xFF	; 255
 46c:	9f 4f       	sbci	r25, 0xFF	; 255
 46e:	16 c0       	rjmp	.+44     	; 0x49c <__floatsisf+0x6c>
 470:	88 23       	and	r24, r24
 472:	11 f0       	breq	.+4      	; 0x478 <__floatsisf+0x48>
 474:	96 e9       	ldi	r25, 0x96	; 150
 476:	11 c0       	rjmp	.+34     	; 0x49a <__floatsisf+0x6a>
 478:	77 23       	and	r23, r23
 47a:	21 f0       	breq	.+8      	; 0x484 <__floatsisf+0x54>
 47c:	9e e8       	ldi	r25, 0x8E	; 142
 47e:	87 2f       	mov	r24, r23
 480:	76 2f       	mov	r23, r22
 482:	05 c0       	rjmp	.+10     	; 0x48e <__floatsisf+0x5e>
 484:	66 23       	and	r22, r22
 486:	71 f0       	breq	.+28     	; 0x4a4 <__floatsisf+0x74>
 488:	96 e8       	ldi	r25, 0x86	; 134
 48a:	86 2f       	mov	r24, r22
 48c:	70 e0       	ldi	r23, 0x00	; 0
 48e:	60 e0       	ldi	r22, 0x00	; 0
 490:	2a f0       	brmi	.+10     	; 0x49c <__floatsisf+0x6c>
 492:	9a 95       	dec	r25
 494:	66 0f       	add	r22, r22
 496:	77 1f       	adc	r23, r23
 498:	88 1f       	adc	r24, r24
 49a:	da f7       	brpl	.-10     	; 0x492 <__floatsisf+0x62>
 49c:	88 0f       	add	r24, r24
 49e:	96 95       	lsr	r25
 4a0:	87 95       	ror	r24
 4a2:	97 f9       	bld	r25, 7
 4a4:	08 95       	ret

000004a6 <__fp_inf>:
 4a6:	97 f9       	bld	r25, 7
 4a8:	9f 67       	ori	r25, 0x7F	; 127
 4aa:	80 e8       	ldi	r24, 0x80	; 128
 4ac:	70 e0       	ldi	r23, 0x00	; 0
 4ae:	60 e0       	ldi	r22, 0x00	; 0
 4b0:	08 95       	ret

000004b2 <__fp_nan>:
 4b2:	9f ef       	ldi	r25, 0xFF	; 255
 4b4:	80 ec       	ldi	r24, 0xC0	; 192
 4b6:	08 95       	ret

000004b8 <__fp_pscA>:
 4b8:	00 24       	eor	r0, r0
 4ba:	0a 94       	dec	r0
 4bc:	16 16       	cp	r1, r22
 4be:	17 06       	cpc	r1, r23
 4c0:	18 06       	cpc	r1, r24
 4c2:	09 06       	cpc	r0, r25
 4c4:	08 95       	ret

000004c6 <__fp_pscB>:
 4c6:	00 24       	eor	r0, r0
 4c8:	0a 94       	dec	r0
 4ca:	12 16       	cp	r1, r18
 4cc:	13 06       	cpc	r1, r19
 4ce:	14 06       	cpc	r1, r20
 4d0:	05 06       	cpc	r0, r21
 4d2:	08 95       	ret

000004d4 <__fp_round>:
 4d4:	09 2e       	mov	r0, r25
 4d6:	03 94       	inc	r0
 4d8:	00 0c       	add	r0, r0
 4da:	11 f4       	brne	.+4      	; 0x4e0 <__fp_round+0xc>
 4dc:	88 23       	and	r24, r24
 4de:	52 f0       	brmi	.+20     	; 0x4f4 <__fp_round+0x20>
 4e0:	bb 0f       	add	r27, r27
 4e2:	40 f4       	brcc	.+16     	; 0x4f4 <__fp_round+0x20>
 4e4:	bf 2b       	or	r27, r31
 4e6:	11 f4       	brne	.+4      	; 0x4ec <__fp_round+0x18>
 4e8:	60 ff       	sbrs	r22, 0
 4ea:	04 c0       	rjmp	.+8      	; 0x4f4 <__fp_round+0x20>
 4ec:	6f 5f       	subi	r22, 0xFF	; 255
 4ee:	7f 4f       	sbci	r23, 0xFF	; 255
 4f0:	8f 4f       	sbci	r24, 0xFF	; 255
 4f2:	9f 4f       	sbci	r25, 0xFF	; 255
 4f4:	08 95       	ret

000004f6 <__fp_split3>:
 4f6:	57 fd       	sbrc	r21, 7
 4f8:	90 58       	subi	r25, 0x80	; 128
 4fa:	44 0f       	add	r20, r20
 4fc:	55 1f       	adc	r21, r21
 4fe:	59 f0       	breq	.+22     	; 0x516 <__fp_splitA+0x10>
 500:	5f 3f       	cpi	r21, 0xFF	; 255
 502:	71 f0       	breq	.+28     	; 0x520 <__fp_splitA+0x1a>
 504:	47 95       	ror	r20

00000506 <__fp_splitA>:
 506:	88 0f       	add	r24, r24
 508:	97 fb       	bst	r25, 7
 50a:	99 1f       	adc	r25, r25
 50c:	61 f0       	breq	.+24     	; 0x526 <__fp_splitA+0x20>
 50e:	9f 3f       	cpi	r25, 0xFF	; 255
 510:	79 f0       	breq	.+30     	; 0x530 <__fp_splitA+0x2a>
 512:	87 95       	ror	r24
 514:	08 95       	ret
 516:	12 16       	cp	r1, r18
 518:	13 06       	cpc	r1, r19
 51a:	14 06       	cpc	r1, r20
 51c:	55 1f       	adc	r21, r21
 51e:	f2 cf       	rjmp	.-28     	; 0x504 <__fp_split3+0xe>
 520:	46 95       	lsr	r20
 522:	f1 df       	rcall	.-30     	; 0x506 <__fp_splitA>
 524:	08 c0       	rjmp	.+16     	; 0x536 <__fp_splitA+0x30>
 526:	16 16       	cp	r1, r22
 528:	17 06       	cpc	r1, r23
 52a:	18 06       	cpc	r1, r24
 52c:	99 1f       	adc	r25, r25
 52e:	f1 cf       	rjmp	.-30     	; 0x512 <__fp_splitA+0xc>
 530:	86 95       	lsr	r24
 532:	71 05       	cpc	r23, r1
 534:	61 05       	cpc	r22, r1
 536:	08 94       	sec
 538:	08 95       	ret

0000053a <__fp_zero>:
 53a:	e8 94       	clt

0000053c <__fp_szero>:
 53c:	bb 27       	eor	r27, r27
 53e:	66 27       	eor	r22, r22
 540:	77 27       	eor	r23, r23
 542:	cb 01       	movw	r24, r22
 544:	97 f9       	bld	r25, 7
 546:	08 95       	ret

00000548 <__mulsf3>:
 548:	0e 94 b7 02 	call	0x56e	; 0x56e <__mulsf3x>
 54c:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__fp_round>
 550:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <__fp_pscA>
 554:	38 f0       	brcs	.+14     	; 0x564 <__mulsf3+0x1c>
 556:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__fp_pscB>
 55a:	20 f0       	brcs	.+8      	; 0x564 <__mulsf3+0x1c>
 55c:	95 23       	and	r25, r21
 55e:	11 f0       	breq	.+4      	; 0x564 <__mulsf3+0x1c>
 560:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <__fp_inf>
 564:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__fp_nan>
 568:	11 24       	eor	r1, r1
 56a:	0c 94 9e 02 	jmp	0x53c	; 0x53c <__fp_szero>

0000056e <__mulsf3x>:
 56e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__fp_split3>
 572:	70 f3       	brcs	.-36     	; 0x550 <__mulsf3+0x8>

00000574 <__mulsf3_pse>:
 574:	95 9f       	mul	r25, r21
 576:	c1 f3       	breq	.-16     	; 0x568 <__mulsf3+0x20>
 578:	95 0f       	add	r25, r21
 57a:	50 e0       	ldi	r21, 0x00	; 0
 57c:	55 1f       	adc	r21, r21
 57e:	62 9f       	mul	r22, r18
 580:	f0 01       	movw	r30, r0
 582:	72 9f       	mul	r23, r18
 584:	bb 27       	eor	r27, r27
 586:	f0 0d       	add	r31, r0
 588:	b1 1d       	adc	r27, r1
 58a:	63 9f       	mul	r22, r19
 58c:	aa 27       	eor	r26, r26
 58e:	f0 0d       	add	r31, r0
 590:	b1 1d       	adc	r27, r1
 592:	aa 1f       	adc	r26, r26
 594:	64 9f       	mul	r22, r20
 596:	66 27       	eor	r22, r22
 598:	b0 0d       	add	r27, r0
 59a:	a1 1d       	adc	r26, r1
 59c:	66 1f       	adc	r22, r22
 59e:	82 9f       	mul	r24, r18
 5a0:	22 27       	eor	r18, r18
 5a2:	b0 0d       	add	r27, r0
 5a4:	a1 1d       	adc	r26, r1
 5a6:	62 1f       	adc	r22, r18
 5a8:	73 9f       	mul	r23, r19
 5aa:	b0 0d       	add	r27, r0
 5ac:	a1 1d       	adc	r26, r1
 5ae:	62 1f       	adc	r22, r18
 5b0:	83 9f       	mul	r24, r19
 5b2:	a0 0d       	add	r26, r0
 5b4:	61 1d       	adc	r22, r1
 5b6:	22 1f       	adc	r18, r18
 5b8:	74 9f       	mul	r23, r20
 5ba:	33 27       	eor	r19, r19
 5bc:	a0 0d       	add	r26, r0
 5be:	61 1d       	adc	r22, r1
 5c0:	23 1f       	adc	r18, r19
 5c2:	84 9f       	mul	r24, r20
 5c4:	60 0d       	add	r22, r0
 5c6:	21 1d       	adc	r18, r1
 5c8:	82 2f       	mov	r24, r18
 5ca:	76 2f       	mov	r23, r22
 5cc:	6a 2f       	mov	r22, r26
 5ce:	11 24       	eor	r1, r1
 5d0:	9f 57       	subi	r25, 0x7F	; 127
 5d2:	50 40       	sbci	r21, 0x00	; 0
 5d4:	9a f0       	brmi	.+38     	; 0x5fc <__mulsf3_pse+0x88>
 5d6:	f1 f0       	breq	.+60     	; 0x614 <__mulsf3_pse+0xa0>
 5d8:	88 23       	and	r24, r24
 5da:	4a f0       	brmi	.+18     	; 0x5ee <__mulsf3_pse+0x7a>
 5dc:	ee 0f       	add	r30, r30
 5de:	ff 1f       	adc	r31, r31
 5e0:	bb 1f       	adc	r27, r27
 5e2:	66 1f       	adc	r22, r22
 5e4:	77 1f       	adc	r23, r23
 5e6:	88 1f       	adc	r24, r24
 5e8:	91 50       	subi	r25, 0x01	; 1
 5ea:	50 40       	sbci	r21, 0x00	; 0
 5ec:	a9 f7       	brne	.-22     	; 0x5d8 <__mulsf3_pse+0x64>
 5ee:	9e 3f       	cpi	r25, 0xFE	; 254
 5f0:	51 05       	cpc	r21, r1
 5f2:	80 f0       	brcs	.+32     	; 0x614 <__mulsf3_pse+0xa0>
 5f4:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <__fp_inf>
 5f8:	0c 94 9e 02 	jmp	0x53c	; 0x53c <__fp_szero>
 5fc:	5f 3f       	cpi	r21, 0xFF	; 255
 5fe:	e4 f3       	brlt	.-8      	; 0x5f8 <__mulsf3_pse+0x84>
 600:	98 3e       	cpi	r25, 0xE8	; 232
 602:	d4 f3       	brlt	.-12     	; 0x5f8 <__mulsf3_pse+0x84>
 604:	86 95       	lsr	r24
 606:	77 95       	ror	r23
 608:	67 95       	ror	r22
 60a:	b7 95       	ror	r27
 60c:	f7 95       	ror	r31
 60e:	e7 95       	ror	r30
 610:	9f 5f       	subi	r25, 0xFF	; 255
 612:	c1 f7       	brne	.-16     	; 0x604 <__mulsf3_pse+0x90>
 614:	fe 2b       	or	r31, r30
 616:	88 0f       	add	r24, r24
 618:	91 1d       	adc	r25, r1
 61a:	96 95       	lsr	r25
 61c:	87 95       	ror	r24
 61e:	97 f9       	bld	r25, 7
 620:	08 95       	ret
 622:	19 f4       	brne	.+6      	; 0x62a <__mulsf3_pse+0xb6>
 624:	16 f4       	brtc	.+4      	; 0x62a <__mulsf3_pse+0xb6>
 626:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__fp_nan>
 62a:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <__fp_mpack>

0000062e <sqrt>:
 62e:	0e 94 83 02 	call	0x506	; 0x506 <__fp_splitA>
 632:	b8 f3       	brcs	.-18     	; 0x622 <__mulsf3_pse+0xae>
 634:	99 23       	and	r25, r25
 636:	c9 f3       	breq	.-14     	; 0x62a <__mulsf3_pse+0xb6>
 638:	b6 f3       	brts	.-20     	; 0x626 <__mulsf3_pse+0xb2>
 63a:	9f 57       	subi	r25, 0x7F	; 127
 63c:	55 0b       	sbc	r21, r21
 63e:	87 ff       	sbrs	r24, 7
 640:	0e 94 65 03 	call	0x6ca	; 0x6ca <__fp_norm2>
 644:	00 24       	eor	r0, r0
 646:	a0 e6       	ldi	r26, 0x60	; 96
 648:	40 ea       	ldi	r20, 0xA0	; 160
 64a:	90 01       	movw	r18, r0
 64c:	80 58       	subi	r24, 0x80	; 128
 64e:	56 95       	lsr	r21
 650:	97 95       	ror	r25
 652:	28 f4       	brcc	.+10     	; 0x65e <sqrt+0x30>
 654:	80 5c       	subi	r24, 0xC0	; 192
 656:	66 0f       	add	r22, r22
 658:	77 1f       	adc	r23, r23
 65a:	88 1f       	adc	r24, r24
 65c:	20 f0       	brcs	.+8      	; 0x666 <sqrt+0x38>
 65e:	26 17       	cp	r18, r22
 660:	37 07       	cpc	r19, r23
 662:	48 07       	cpc	r20, r24
 664:	30 f4       	brcc	.+12     	; 0x672 <sqrt+0x44>
 666:	62 1b       	sub	r22, r18
 668:	73 0b       	sbc	r23, r19
 66a:	84 0b       	sbc	r24, r20
 66c:	20 29       	or	r18, r0
 66e:	31 29       	or	r19, r1
 670:	4a 2b       	or	r20, r26
 672:	a6 95       	lsr	r26
 674:	17 94       	ror	r1
 676:	07 94       	ror	r0
 678:	20 25       	eor	r18, r0
 67a:	31 25       	eor	r19, r1
 67c:	4a 27       	eor	r20, r26
 67e:	58 f7       	brcc	.-42     	; 0x656 <sqrt+0x28>
 680:	66 0f       	add	r22, r22
 682:	77 1f       	adc	r23, r23
 684:	88 1f       	adc	r24, r24
 686:	20 f0       	brcs	.+8      	; 0x690 <sqrt+0x62>
 688:	26 17       	cp	r18, r22
 68a:	37 07       	cpc	r19, r23
 68c:	48 07       	cpc	r20, r24
 68e:	30 f4       	brcc	.+12     	; 0x69c <sqrt+0x6e>
 690:	62 0b       	sbc	r22, r18
 692:	73 0b       	sbc	r23, r19
 694:	84 0b       	sbc	r24, r20
 696:	20 0d       	add	r18, r0
 698:	31 1d       	adc	r19, r1
 69a:	41 1d       	adc	r20, r1
 69c:	a0 95       	com	r26
 69e:	81 f7       	brne	.-32     	; 0x680 <sqrt+0x52>
 6a0:	b9 01       	movw	r22, r18
 6a2:	84 2f       	mov	r24, r20
 6a4:	91 58       	subi	r25, 0x81	; 129
 6a6:	88 0f       	add	r24, r24
 6a8:	96 95       	lsr	r25
 6aa:	87 95       	ror	r24
 6ac:	08 95       	ret

000006ae <__fp_mpack>:
 6ae:	9f 3f       	cpi	r25, 0xFF	; 255
 6b0:	31 f0       	breq	.+12     	; 0x6be <__fp_mpack_finite+0xc>

000006b2 <__fp_mpack_finite>:
 6b2:	91 50       	subi	r25, 0x01	; 1
 6b4:	20 f4       	brcc	.+8      	; 0x6be <__fp_mpack_finite+0xc>
 6b6:	87 95       	ror	r24
 6b8:	77 95       	ror	r23
 6ba:	67 95       	ror	r22
 6bc:	b7 95       	ror	r27
 6be:	88 0f       	add	r24, r24
 6c0:	91 1d       	adc	r25, r1
 6c2:	96 95       	lsr	r25
 6c4:	87 95       	ror	r24
 6c6:	97 f9       	bld	r25, 7
 6c8:	08 95       	ret

000006ca <__fp_norm2>:
 6ca:	91 50       	subi	r25, 0x01	; 1
 6cc:	50 40       	sbci	r21, 0x00	; 0
 6ce:	66 0f       	add	r22, r22
 6d0:	77 1f       	adc	r23, r23
 6d2:	88 1f       	adc	r24, r24
 6d4:	d2 f7       	brpl	.-12     	; 0x6ca <__fp_norm2>
 6d6:	08 95       	ret

000006d8 <__udivmodsi4>:
 6d8:	a1 e2       	ldi	r26, 0x21	; 33
 6da:	1a 2e       	mov	r1, r26
 6dc:	aa 1b       	sub	r26, r26
 6de:	bb 1b       	sub	r27, r27
 6e0:	fd 01       	movw	r30, r26
 6e2:	0d c0       	rjmp	.+26     	; 0x6fe <__udivmodsi4_ep>

000006e4 <__udivmodsi4_loop>:
 6e4:	aa 1f       	adc	r26, r26
 6e6:	bb 1f       	adc	r27, r27
 6e8:	ee 1f       	adc	r30, r30
 6ea:	ff 1f       	adc	r31, r31
 6ec:	a2 17       	cp	r26, r18
 6ee:	b3 07       	cpc	r27, r19
 6f0:	e4 07       	cpc	r30, r20
 6f2:	f5 07       	cpc	r31, r21
 6f4:	20 f0       	brcs	.+8      	; 0x6fe <__udivmodsi4_ep>
 6f6:	a2 1b       	sub	r26, r18
 6f8:	b3 0b       	sbc	r27, r19
 6fa:	e4 0b       	sbc	r30, r20
 6fc:	f5 0b       	sbc	r31, r21

000006fe <__udivmodsi4_ep>:
 6fe:	66 1f       	adc	r22, r22
 700:	77 1f       	adc	r23, r23
 702:	88 1f       	adc	r24, r24
 704:	99 1f       	adc	r25, r25
 706:	1a 94       	dec	r1
 708:	69 f7       	brne	.-38     	; 0x6e4 <__udivmodsi4_loop>
 70a:	60 95       	com	r22
 70c:	70 95       	com	r23
 70e:	80 95       	com	r24
 710:	90 95       	com	r25
 712:	9b 01       	movw	r18, r22
 714:	ac 01       	movw	r20, r24
 716:	bd 01       	movw	r22, r26
 718:	cf 01       	movw	r24, r30
 71a:	08 95       	ret

0000071c <_exit>:
 71c:	f8 94       	cli

0000071e <__stop_program>:
 71e:	ff cf       	rjmp	.-2      	; 0x71e <__stop_program>


AC Clamp Meter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000044e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000044e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000044e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000480  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009f3  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000803  00000000  00000000  00000f73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000546  00000000  00000000  00001776  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  00001cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b5  00000000  00000000  00001df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000017a  00000000  00000000  000022a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000241f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

volatile int sample = 0;


int main(void)
{
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	00 d0       	rcall	.+0      	; 0x96 <main+0x6>
  96:	00 d0       	rcall	.+0      	; 0x98 <main+0x8>
  98:	00 d0       	rcall	.+0      	; 0x9a <main+0xa>
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
	cli();
  9e:	f8 94       	cli
	DDRD |= (1 << ADC_CLK_OUT);
  a0:	55 9a       	sbi	0x0a, 5	; 10
	DDRD |= (1 << INSTRUMENTATION_OUT);
  a2:	56 9a       	sbi	0x0a, 6	; 10
	device_init();
  a4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <device_init>
	sei();
  a8:	78 94       	sei
	
	int num = 0;
	long int sum = 0;
	volatile int samples = 40;
  aa:	88 e2       	ldi	r24, 0x28	; 40
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	9a 83       	std	Y+2, r25	; 0x02
  b0:	89 83       	std	Y+1, r24	; 0x01
	volatile double rms = 0;
  b2:	1b 82       	std	Y+3, r1	; 0x03
  b4:	1c 82       	std	Y+4, r1	; 0x04
  b6:	1d 82       	std	Y+5, r1	; 0x05
  b8:	1e 82       	std	Y+6, r1	; 0x06
			PORTD |= (1 << INSTRUMENTATION_OUT);
			
			sample = 0;
			//num = ADC_read(0);
			num = ADC_get_conversion_result();
			ADCSRA |= (1 << ADIF);
  ba:	0a e7       	ldi	r16, 0x7A	; 122
  bc:	10 e0       	ldi	r17, 0x00	; 0
		
		if (samples == 0)
		{
			//PORTD |= (1 << INSTRUMENTATION_OUT);
			cli();
			rms = sqrt(sum/40);
  be:	0f 2e       	mov	r0, r31
  c0:	f8 e2       	ldi	r31, 0x28	; 40
  c2:	4f 2e       	mov	r4, r31
  c4:	51 2c       	mov	r5, r1
  c6:	61 2c       	mov	r6, r1
  c8:	71 2c       	mov	r7, r1
  ca:	f0 2d       	mov	r31, r0
			sum = 0;
			samples = 40;
  cc:	0f 2e       	mov	r0, r31
  ce:	f8 e2       	ldi	r31, 0x28	; 40
  d0:	af 2e       	mov	r10, r31
  d2:	b1 2c       	mov	r11, r1
  d4:	f0 2d       	mov	r31, r0

volatile int sample = 0;


int main(void)
{
  d6:	c1 2c       	mov	r12, r1
  d8:	d1 2c       	mov	r13, r1
  da:	76 01       	movw	r14, r12
	volatile int samples = 40;
	volatile double rms = 0;
	while (1)
	{
		//if (sample == 1)
		if(ADC_is_conversion_done())
  dc:	0e 94 cf 00 	call	0x19e	; 0x19e <ADC_is_conversion_done>
  e0:	88 23       	and	r24, r24
  e2:	01 f1       	breq	.+64     	; 0x124 <main+0x94>
		{
			PORTD |= (1 << INSTRUMENTATION_OUT);
  e4:	5e 9a       	sbi	0x0b, 6	; 11
			
			sample = 0;
  e6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  ea:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			//num = ADC_read(0);
			num = ADC_get_conversion_result();
  ee:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <ADC_get_conversion_result>
			ADCSRA |= (1 << ADIF);
  f2:	f8 01       	movw	r30, r16
  f4:	20 81       	ld	r18, Z
  f6:	20 61       	ori	r18, 0x10	; 16
  f8:	20 83       	st	Z, r18
			sum += (num * num);
  fa:	9c 01       	movw	r18, r24
  fc:	22 9f       	mul	r18, r18
  fe:	c0 01       	movw	r24, r0
 100:	23 9f       	mul	r18, r19
 102:	90 0d       	add	r25, r0
 104:	90 0d       	add	r25, r0
 106:	11 24       	eor	r1, r1
 108:	09 2e       	mov	r0, r25
 10a:	00 0c       	add	r0, r0
 10c:	aa 0b       	sbc	r26, r26
 10e:	bb 0b       	sbc	r27, r27
 110:	c8 0e       	add	r12, r24
 112:	d9 1e       	adc	r13, r25
 114:	ea 1e       	adc	r14, r26
 116:	fb 1e       	adc	r15, r27
			samples -= 1;
 118:	89 81       	ldd	r24, Y+1	; 0x01
 11a:	9a 81       	ldd	r25, Y+2	; 0x02
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	9a 83       	std	Y+2, r25	; 0x02
 120:	89 83       	std	Y+1, r24	; 0x01
			PORTD &= ~(1 << INSTRUMENTATION_OUT);
 122:	5e 98       	cbi	0x0b, 6	; 11
		}
		
		
		if (samples == 0)
 124:	89 81       	ldd	r24, Y+1	; 0x01
 126:	9a 81       	ldd	r25, Y+2	; 0x02
 128:	89 2b       	or	r24, r25
 12a:	c1 f6       	brne	.-80     	; 0xdc <main+0x4c>
		{
			//PORTD |= (1 << INSTRUMENTATION_OUT);
			cli();
 12c:	f8 94       	cli
			rms = sqrt(sum/40);
 12e:	c7 01       	movw	r24, r14
 130:	b6 01       	movw	r22, r12
 132:	a3 01       	movw	r20, r6
 134:	92 01       	movw	r18, r4
 136:	0e 94 aa 01 	call	0x354	; 0x354 <__divmodsi4>
 13a:	69 01       	movw	r12, r18
 13c:	7a 01       	movw	r14, r20
 13e:	c7 01       	movw	r24, r14
 140:	b6 01       	movw	r22, r12
 142:	0e 94 ef 00 	call	0x1de	; 0x1de <__floatsisf>
 146:	0e 94 30 01 	call	0x260	; 0x260 <sqrt>
 14a:	6b 83       	std	Y+3, r22	; 0x03
 14c:	7c 83       	std	Y+4, r23	; 0x04
 14e:	8d 83       	std	Y+5, r24	; 0x05
 150:	9e 83       	std	Y+6, r25	; 0x06
			sum = 0;
			samples = 40;
 152:	ba 82       	std	Y+2, r11	; 0x02
 154:	a9 82       	std	Y+1, r10	; 0x01
			sei();
 156:	78 94       	sei
 158:	be cf       	rjmp	.-132    	; 0xd6 <main+0x46>

0000015a <__vector_14>:
		}
	}
}

ISR(TIMER0_COMPA_vect)
{
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
	//sample = 1;
	PORTD ^= (1 << ADC_CLK_OUT);
 168:	9b b1       	in	r25, 0x0b	; 11
 16a:	80 e2       	ldi	r24, 0x20	; 32
 16c:	89 27       	eor	r24, r25
 16e:	8b b9       	out	0x0b, r24	; 11
 170:	9f 91       	pop	r25
 172:	8f 91       	pop	r24
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <ADC_init>:
 17e:	80 e4       	ldi	r24, 0x40	; 64
 180:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 184:	ea e7       	ldi	r30, 0x7A	; 122
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	87 e8       	ldi	r24, 0x87	; 135
 18a:	80 83       	st	Z, r24
 18c:	80 81       	ld	r24, Z
 18e:	80 62       	ori	r24, 0x20	; 32
 190:	80 83       	st	Z, r24
 192:	eb e7       	ldi	r30, 0x7B	; 123
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	83 60       	ori	r24, 0x03	; 3
 19a:	80 83       	st	Z, r24
 19c:	08 95       	ret

0000019e <ADC_is_conversion_done>:
 19e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 1a2:	80 71       	andi	r24, 0x10	; 16
 1a4:	08 95       	ret

000001a6 <ADC_get_conversion_result>:
 1a6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 1aa:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	92 2b       	or	r25, r18
 1b2:	08 95       	ret

000001b4 <device_init>:
 1b4:	0e 94 df 00 	call	0x1be	; 0x1be <timer_0_init>
 1b8:	0e 94 bf 00 	call	0x17e	; 0x17e <ADC_init>
 1bc:	08 95       	ret

000001be <timer_0_init>:
 1be:	84 b5       	in	r24, 0x24	; 36
 1c0:	82 60       	ori	r24, 0x02	; 2
 1c2:	84 bd       	out	0x24, r24	; 36
 1c4:	85 b5       	in	r24, 0x25	; 37
 1c6:	83 60       	ori	r24, 0x03	; 3
 1c8:	85 bd       	out	0x25, r24	; 37
 1ca:	87 e6       	ldi	r24, 0x67	; 103
 1cc:	87 bd       	out	0x27, r24	; 39
 1ce:	ee e6       	ldi	r30, 0x6E	; 110
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	82 60       	ori	r24, 0x02	; 2
 1d6:	80 83       	st	Z, r24
 1d8:	08 95       	ret

000001da <__floatunsisf>:
 1da:	e8 94       	clt
 1dc:	09 c0       	rjmp	.+18     	; 0x1f0 <__floatsisf+0x12>

000001de <__floatsisf>:
 1de:	97 fb       	bst	r25, 7
 1e0:	3e f4       	brtc	.+14     	; 0x1f0 <__floatsisf+0x12>
 1e2:	90 95       	com	r25
 1e4:	80 95       	com	r24
 1e6:	70 95       	com	r23
 1e8:	61 95       	neg	r22
 1ea:	7f 4f       	sbci	r23, 0xFF	; 255
 1ec:	8f 4f       	sbci	r24, 0xFF	; 255
 1ee:	9f 4f       	sbci	r25, 0xFF	; 255
 1f0:	99 23       	and	r25, r25
 1f2:	a9 f0       	breq	.+42     	; 0x21e <__floatsisf+0x40>
 1f4:	f9 2f       	mov	r31, r25
 1f6:	96 e9       	ldi	r25, 0x96	; 150
 1f8:	bb 27       	eor	r27, r27
 1fa:	93 95       	inc	r25
 1fc:	f6 95       	lsr	r31
 1fe:	87 95       	ror	r24
 200:	77 95       	ror	r23
 202:	67 95       	ror	r22
 204:	b7 95       	ror	r27
 206:	f1 11       	cpse	r31, r1
 208:	f8 cf       	rjmp	.-16     	; 0x1fa <__floatsisf+0x1c>
 20a:	fa f4       	brpl	.+62     	; 0x24a <__floatsisf+0x6c>
 20c:	bb 0f       	add	r27, r27
 20e:	11 f4       	brne	.+4      	; 0x214 <__floatsisf+0x36>
 210:	60 ff       	sbrs	r22, 0
 212:	1b c0       	rjmp	.+54     	; 0x24a <__floatsisf+0x6c>
 214:	6f 5f       	subi	r22, 0xFF	; 255
 216:	7f 4f       	sbci	r23, 0xFF	; 255
 218:	8f 4f       	sbci	r24, 0xFF	; 255
 21a:	9f 4f       	sbci	r25, 0xFF	; 255
 21c:	16 c0       	rjmp	.+44     	; 0x24a <__floatsisf+0x6c>
 21e:	88 23       	and	r24, r24
 220:	11 f0       	breq	.+4      	; 0x226 <__floatsisf+0x48>
 222:	96 e9       	ldi	r25, 0x96	; 150
 224:	11 c0       	rjmp	.+34     	; 0x248 <__floatsisf+0x6a>
 226:	77 23       	and	r23, r23
 228:	21 f0       	breq	.+8      	; 0x232 <__floatsisf+0x54>
 22a:	9e e8       	ldi	r25, 0x8E	; 142
 22c:	87 2f       	mov	r24, r23
 22e:	76 2f       	mov	r23, r22
 230:	05 c0       	rjmp	.+10     	; 0x23c <__floatsisf+0x5e>
 232:	66 23       	and	r22, r22
 234:	71 f0       	breq	.+28     	; 0x252 <__floatsisf+0x74>
 236:	96 e8       	ldi	r25, 0x86	; 134
 238:	86 2f       	mov	r24, r22
 23a:	70 e0       	ldi	r23, 0x00	; 0
 23c:	60 e0       	ldi	r22, 0x00	; 0
 23e:	2a f0       	brmi	.+10     	; 0x24a <__floatsisf+0x6c>
 240:	9a 95       	dec	r25
 242:	66 0f       	add	r22, r22
 244:	77 1f       	adc	r23, r23
 246:	88 1f       	adc	r24, r24
 248:	da f7       	brpl	.-10     	; 0x240 <__floatsisf+0x62>
 24a:	88 0f       	add	r24, r24
 24c:	96 95       	lsr	r25
 24e:	87 95       	ror	r24
 250:	97 f9       	bld	r25, 7
 252:	08 95       	ret
 254:	19 f4       	brne	.+6      	; 0x25c <__floatsisf+0x7e>
 256:	16 f4       	brtc	.+4      	; 0x25c <__floatsisf+0x7e>
 258:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__fp_nan>
 25c:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__fp_mpack>

00000260 <sqrt>:
 260:	0e 94 90 01 	call	0x320	; 0x320 <__fp_splitA>
 264:	b8 f3       	brcs	.-18     	; 0x254 <__floatsisf+0x76>
 266:	99 23       	and	r25, r25
 268:	c9 f3       	breq	.-14     	; 0x25c <__floatsisf+0x7e>
 26a:	b6 f3       	brts	.-20     	; 0x258 <__floatsisf+0x7a>
 26c:	9f 57       	subi	r25, 0x7F	; 127
 26e:	55 0b       	sbc	r21, r21
 270:	87 ff       	sbrs	r24, 7
 272:	0e 94 81 01 	call	0x302	; 0x302 <__fp_norm2>
 276:	00 24       	eor	r0, r0
 278:	a0 e6       	ldi	r26, 0x60	; 96
 27a:	40 ea       	ldi	r20, 0xA0	; 160
 27c:	90 01       	movw	r18, r0
 27e:	80 58       	subi	r24, 0x80	; 128
 280:	56 95       	lsr	r21
 282:	97 95       	ror	r25
 284:	28 f4       	brcc	.+10     	; 0x290 <sqrt+0x30>
 286:	80 5c       	subi	r24, 0xC0	; 192
 288:	66 0f       	add	r22, r22
 28a:	77 1f       	adc	r23, r23
 28c:	88 1f       	adc	r24, r24
 28e:	20 f0       	brcs	.+8      	; 0x298 <sqrt+0x38>
 290:	26 17       	cp	r18, r22
 292:	37 07       	cpc	r19, r23
 294:	48 07       	cpc	r20, r24
 296:	30 f4       	brcc	.+12     	; 0x2a4 <sqrt+0x44>
 298:	62 1b       	sub	r22, r18
 29a:	73 0b       	sbc	r23, r19
 29c:	84 0b       	sbc	r24, r20
 29e:	20 29       	or	r18, r0
 2a0:	31 29       	or	r19, r1
 2a2:	4a 2b       	or	r20, r26
 2a4:	a6 95       	lsr	r26
 2a6:	17 94       	ror	r1
 2a8:	07 94       	ror	r0
 2aa:	20 25       	eor	r18, r0
 2ac:	31 25       	eor	r19, r1
 2ae:	4a 27       	eor	r20, r26
 2b0:	58 f7       	brcc	.-42     	; 0x288 <sqrt+0x28>
 2b2:	66 0f       	add	r22, r22
 2b4:	77 1f       	adc	r23, r23
 2b6:	88 1f       	adc	r24, r24
 2b8:	20 f0       	brcs	.+8      	; 0x2c2 <sqrt+0x62>
 2ba:	26 17       	cp	r18, r22
 2bc:	37 07       	cpc	r19, r23
 2be:	48 07       	cpc	r20, r24
 2c0:	30 f4       	brcc	.+12     	; 0x2ce <sqrt+0x6e>
 2c2:	62 0b       	sbc	r22, r18
 2c4:	73 0b       	sbc	r23, r19
 2c6:	84 0b       	sbc	r24, r20
 2c8:	20 0d       	add	r18, r0
 2ca:	31 1d       	adc	r19, r1
 2cc:	41 1d       	adc	r20, r1
 2ce:	a0 95       	com	r26
 2d0:	81 f7       	brne	.-32     	; 0x2b2 <sqrt+0x52>
 2d2:	b9 01       	movw	r22, r18
 2d4:	84 2f       	mov	r24, r20
 2d6:	91 58       	subi	r25, 0x81	; 129
 2d8:	88 0f       	add	r24, r24
 2da:	96 95       	lsr	r25
 2dc:	87 95       	ror	r24
 2de:	08 95       	ret

000002e0 <__fp_mpack>:
 2e0:	9f 3f       	cpi	r25, 0xFF	; 255
 2e2:	31 f0       	breq	.+12     	; 0x2f0 <__fp_mpack_finite+0xc>

000002e4 <__fp_mpack_finite>:
 2e4:	91 50       	subi	r25, 0x01	; 1
 2e6:	20 f4       	brcc	.+8      	; 0x2f0 <__fp_mpack_finite+0xc>
 2e8:	87 95       	ror	r24
 2ea:	77 95       	ror	r23
 2ec:	67 95       	ror	r22
 2ee:	b7 95       	ror	r27
 2f0:	88 0f       	add	r24, r24
 2f2:	91 1d       	adc	r25, r1
 2f4:	96 95       	lsr	r25
 2f6:	87 95       	ror	r24
 2f8:	97 f9       	bld	r25, 7
 2fa:	08 95       	ret

000002fc <__fp_nan>:
 2fc:	9f ef       	ldi	r25, 0xFF	; 255
 2fe:	80 ec       	ldi	r24, 0xC0	; 192
 300:	08 95       	ret

00000302 <__fp_norm2>:
 302:	91 50       	subi	r25, 0x01	; 1
 304:	50 40       	sbci	r21, 0x00	; 0
 306:	66 0f       	add	r22, r22
 308:	77 1f       	adc	r23, r23
 30a:	88 1f       	adc	r24, r24
 30c:	d2 f7       	brpl	.-12     	; 0x302 <__fp_norm2>
 30e:	08 95       	ret

00000310 <__fp_split3>:
 310:	57 fd       	sbrc	r21, 7
 312:	90 58       	subi	r25, 0x80	; 128
 314:	44 0f       	add	r20, r20
 316:	55 1f       	adc	r21, r21
 318:	59 f0       	breq	.+22     	; 0x330 <__fp_splitA+0x10>
 31a:	5f 3f       	cpi	r21, 0xFF	; 255
 31c:	71 f0       	breq	.+28     	; 0x33a <__fp_splitA+0x1a>
 31e:	47 95       	ror	r20

00000320 <__fp_splitA>:
 320:	88 0f       	add	r24, r24
 322:	97 fb       	bst	r25, 7
 324:	99 1f       	adc	r25, r25
 326:	61 f0       	breq	.+24     	; 0x340 <__fp_splitA+0x20>
 328:	9f 3f       	cpi	r25, 0xFF	; 255
 32a:	79 f0       	breq	.+30     	; 0x34a <__fp_splitA+0x2a>
 32c:	87 95       	ror	r24
 32e:	08 95       	ret
 330:	12 16       	cp	r1, r18
 332:	13 06       	cpc	r1, r19
 334:	14 06       	cpc	r1, r20
 336:	55 1f       	adc	r21, r21
 338:	f2 cf       	rjmp	.-28     	; 0x31e <__fp_split3+0xe>
 33a:	46 95       	lsr	r20
 33c:	f1 df       	rcall	.-30     	; 0x320 <__fp_splitA>
 33e:	08 c0       	rjmp	.+16     	; 0x350 <__fp_splitA+0x30>
 340:	16 16       	cp	r1, r22
 342:	17 06       	cpc	r1, r23
 344:	18 06       	cpc	r1, r24
 346:	99 1f       	adc	r25, r25
 348:	f1 cf       	rjmp	.-30     	; 0x32c <__fp_splitA+0xc>
 34a:	86 95       	lsr	r24
 34c:	71 05       	cpc	r23, r1
 34e:	61 05       	cpc	r22, r1
 350:	08 94       	sec
 352:	08 95       	ret

00000354 <__divmodsi4>:
 354:	05 2e       	mov	r0, r21
 356:	97 fb       	bst	r25, 7
 358:	1e f4       	brtc	.+6      	; 0x360 <__divmodsi4+0xc>
 35a:	00 94       	com	r0
 35c:	0e 94 c1 01 	call	0x382	; 0x382 <__negsi2>
 360:	57 fd       	sbrc	r21, 7
 362:	07 d0       	rcall	.+14     	; 0x372 <__divmodsi4_neg2>
 364:	0e 94 c9 01 	call	0x392	; 0x392 <__udivmodsi4>
 368:	07 fc       	sbrc	r0, 7
 36a:	03 d0       	rcall	.+6      	; 0x372 <__divmodsi4_neg2>
 36c:	4e f4       	brtc	.+18     	; 0x380 <__divmodsi4_exit>
 36e:	0c 94 c1 01 	jmp	0x382	; 0x382 <__negsi2>

00000372 <__divmodsi4_neg2>:
 372:	50 95       	com	r21
 374:	40 95       	com	r20
 376:	30 95       	com	r19
 378:	21 95       	neg	r18
 37a:	3f 4f       	sbci	r19, 0xFF	; 255
 37c:	4f 4f       	sbci	r20, 0xFF	; 255
 37e:	5f 4f       	sbci	r21, 0xFF	; 255

00000380 <__divmodsi4_exit>:
 380:	08 95       	ret

00000382 <__negsi2>:
 382:	90 95       	com	r25
 384:	80 95       	com	r24
 386:	70 95       	com	r23
 388:	61 95       	neg	r22
 38a:	7f 4f       	sbci	r23, 0xFF	; 255
 38c:	8f 4f       	sbci	r24, 0xFF	; 255
 38e:	9f 4f       	sbci	r25, 0xFF	; 255
 390:	08 95       	ret

00000392 <__udivmodsi4>:
 392:	a1 e2       	ldi	r26, 0x21	; 33
 394:	1a 2e       	mov	r1, r26
 396:	aa 1b       	sub	r26, r26
 398:	bb 1b       	sub	r27, r27
 39a:	fd 01       	movw	r30, r26
 39c:	0d c0       	rjmp	.+26     	; 0x3b8 <__udivmodsi4_ep>

0000039e <__udivmodsi4_loop>:
 39e:	aa 1f       	adc	r26, r26
 3a0:	bb 1f       	adc	r27, r27
 3a2:	ee 1f       	adc	r30, r30
 3a4:	ff 1f       	adc	r31, r31
 3a6:	a2 17       	cp	r26, r18
 3a8:	b3 07       	cpc	r27, r19
 3aa:	e4 07       	cpc	r30, r20
 3ac:	f5 07       	cpc	r31, r21
 3ae:	20 f0       	brcs	.+8      	; 0x3b8 <__udivmodsi4_ep>
 3b0:	a2 1b       	sub	r26, r18
 3b2:	b3 0b       	sbc	r27, r19
 3b4:	e4 0b       	sbc	r30, r20
 3b6:	f5 0b       	sbc	r31, r21

000003b8 <__udivmodsi4_ep>:
 3b8:	66 1f       	adc	r22, r22
 3ba:	77 1f       	adc	r23, r23
 3bc:	88 1f       	adc	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	1a 94       	dec	r1
 3c2:	69 f7       	brne	.-38     	; 0x39e <__udivmodsi4_loop>
 3c4:	60 95       	com	r22
 3c6:	70 95       	com	r23
 3c8:	80 95       	com	r24
 3ca:	90 95       	com	r25
 3cc:	9b 01       	movw	r18, r22
 3ce:	ac 01       	movw	r20, r24
 3d0:	bd 01       	movw	r22, r26
 3d2:	cf 01       	movw	r24, r30
 3d4:	08 95       	ret

000003d6 <_exit>:
 3d6:	f8 94       	cli

000003d8 <__stop_program>:
 3d8:	ff cf       	rjmp	.-2      	; 0x3d8 <__stop_program>
